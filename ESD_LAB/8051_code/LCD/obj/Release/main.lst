                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.9.0 #11195 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mmcs51 --model-large
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _timer0_ISR
                                     13 	.globl _timer0_init
                                     14 	.globl __sdcc_external_startup
                                     15 	.globl _getchar
                                     16 	.globl _putchar
                                     17 	.globl _get_input
                                     18 	.globl _ascii_to_int
                                     19 	.globl _create_custom_char
                                     20 	.globl _hex_dump
                                     21 	.globl _cgram_dump
                                     22 	.globl _lcdclear
                                     23 	.globl _lcdputstr
                                     24 	.globl _lcdputch
                                     25 	.globl _get_cursor_address
                                     26 	.globl _lcdgotoxy
                                     27 	.globl _lcdgotoaddr
                                     28 	.globl _lcdinit
                                     29 	.globl _printf_tiny
                                     30 	.globl _TF1
                                     31 	.globl _TR1
                                     32 	.globl _TF0
                                     33 	.globl _TR0
                                     34 	.globl _IE1
                                     35 	.globl _IT1
                                     36 	.globl _IE0
                                     37 	.globl _IT0
                                     38 	.globl _SM0
                                     39 	.globl _SM1
                                     40 	.globl _SM2
                                     41 	.globl _REN
                                     42 	.globl _TB8
                                     43 	.globl _RB8
                                     44 	.globl _TI
                                     45 	.globl _RI
                                     46 	.globl _CY
                                     47 	.globl _AC
                                     48 	.globl _F0
                                     49 	.globl _RS1
                                     50 	.globl _RS0
                                     51 	.globl _OV
                                     52 	.globl _F1
                                     53 	.globl _P
                                     54 	.globl _RD
                                     55 	.globl _WR
                                     56 	.globl _T1
                                     57 	.globl _T0
                                     58 	.globl _INT1
                                     59 	.globl _INT0
                                     60 	.globl _TXD0
                                     61 	.globl _TXD
                                     62 	.globl _RXD0
                                     63 	.globl _RXD
                                     64 	.globl _P3_7
                                     65 	.globl _P3_6
                                     66 	.globl _P3_5
                                     67 	.globl _P3_4
                                     68 	.globl _P3_3
                                     69 	.globl _P3_2
                                     70 	.globl _P3_1
                                     71 	.globl _P3_0
                                     72 	.globl _P2_7
                                     73 	.globl _P2_6
                                     74 	.globl _P2_5
                                     75 	.globl _P2_4
                                     76 	.globl _P2_3
                                     77 	.globl _P2_2
                                     78 	.globl _P2_1
                                     79 	.globl _P2_0
                                     80 	.globl _P1_7
                                     81 	.globl _P1_6
                                     82 	.globl _P1_5
                                     83 	.globl _P1_4
                                     84 	.globl _P1_3
                                     85 	.globl _P1_2
                                     86 	.globl _P1_1
                                     87 	.globl _P1_0
                                     88 	.globl _P0_7
                                     89 	.globl _P0_6
                                     90 	.globl _P0_5
                                     91 	.globl _P0_4
                                     92 	.globl _P0_3
                                     93 	.globl _P0_2
                                     94 	.globl _P0_1
                                     95 	.globl _P0_0
                                     96 	.globl _PS
                                     97 	.globl _PT1
                                     98 	.globl _PX1
                                     99 	.globl _PT0
                                    100 	.globl _PX0
                                    101 	.globl _EA
                                    102 	.globl _ES
                                    103 	.globl _ET1
                                    104 	.globl _EX1
                                    105 	.globl _ET0
                                    106 	.globl _EX0
                                    107 	.globl _BREG_F7
                                    108 	.globl _BREG_F6
                                    109 	.globl _BREG_F5
                                    110 	.globl _BREG_F4
                                    111 	.globl _BREG_F3
                                    112 	.globl _BREG_F2
                                    113 	.globl _BREG_F1
                                    114 	.globl _BREG_F0
                                    115 	.globl _P5_7
                                    116 	.globl _P5_6
                                    117 	.globl _P5_5
                                    118 	.globl _P5_4
                                    119 	.globl _P5_3
                                    120 	.globl _P5_2
                                    121 	.globl _P5_1
                                    122 	.globl _P5_0
                                    123 	.globl _P4_7
                                    124 	.globl _P4_6
                                    125 	.globl _P4_5
                                    126 	.globl _P4_4
                                    127 	.globl _P4_3
                                    128 	.globl _P4_2
                                    129 	.globl _P4_1
                                    130 	.globl _P4_0
                                    131 	.globl _PX0L
                                    132 	.globl _PT0L
                                    133 	.globl _PX1L
                                    134 	.globl _PT1L
                                    135 	.globl _PSL
                                    136 	.globl _PT2L
                                    137 	.globl _PPCL
                                    138 	.globl _EC
                                    139 	.globl _CCF0
                                    140 	.globl _CCF1
                                    141 	.globl _CCF2
                                    142 	.globl _CCF3
                                    143 	.globl _CCF4
                                    144 	.globl _CR
                                    145 	.globl _CF
                                    146 	.globl _TF2
                                    147 	.globl _EXF2
                                    148 	.globl _RCLK
                                    149 	.globl _TCLK
                                    150 	.globl _EXEN2
                                    151 	.globl _TR2
                                    152 	.globl _C_T2
                                    153 	.globl _CP_RL2
                                    154 	.globl _T2CON_7
                                    155 	.globl _T2CON_6
                                    156 	.globl _T2CON_5
                                    157 	.globl _T2CON_4
                                    158 	.globl _T2CON_3
                                    159 	.globl _T2CON_2
                                    160 	.globl _T2CON_1
                                    161 	.globl _T2CON_0
                                    162 	.globl _PT2
                                    163 	.globl _ET2
                                    164 	.globl _TMOD
                                    165 	.globl _TL1
                                    166 	.globl _TL0
                                    167 	.globl _TH1
                                    168 	.globl _TH0
                                    169 	.globl _TCON
                                    170 	.globl _SP
                                    171 	.globl _SCON
                                    172 	.globl _SBUF0
                                    173 	.globl _SBUF
                                    174 	.globl _PSW
                                    175 	.globl _PCON
                                    176 	.globl _P3
                                    177 	.globl _P2
                                    178 	.globl _P1
                                    179 	.globl _P0
                                    180 	.globl _IP
                                    181 	.globl _IE
                                    182 	.globl _DP0L
                                    183 	.globl _DPL
                                    184 	.globl _DP0H
                                    185 	.globl _DPH
                                    186 	.globl _B
                                    187 	.globl _ACC
                                    188 	.globl _EECON
                                    189 	.globl _KBF
                                    190 	.globl _KBE
                                    191 	.globl _KBLS
                                    192 	.globl _BRL
                                    193 	.globl _BDRCON
                                    194 	.globl _T2MOD
                                    195 	.globl _SPDAT
                                    196 	.globl _SPSTA
                                    197 	.globl _SPCON
                                    198 	.globl _SADEN
                                    199 	.globl _SADDR
                                    200 	.globl _WDTPRG
                                    201 	.globl _WDTRST
                                    202 	.globl _P5
                                    203 	.globl _P4
                                    204 	.globl _IPH1
                                    205 	.globl _IPL1
                                    206 	.globl _IPH0
                                    207 	.globl _IPL0
                                    208 	.globl _IEN1
                                    209 	.globl _IEN0
                                    210 	.globl _CMOD
                                    211 	.globl _CL
                                    212 	.globl _CH
                                    213 	.globl _CCON
                                    214 	.globl _CCAPM4
                                    215 	.globl _CCAPM3
                                    216 	.globl _CCAPM2
                                    217 	.globl _CCAPM1
                                    218 	.globl _CCAPM0
                                    219 	.globl _CCAP4L
                                    220 	.globl _CCAP3L
                                    221 	.globl _CCAP2L
                                    222 	.globl _CCAP1L
                                    223 	.globl _CCAP0L
                                    224 	.globl _CCAP4H
                                    225 	.globl _CCAP3H
                                    226 	.globl _CCAP2H
                                    227 	.globl _CCAP1H
                                    228 	.globl _CCAP0H
                                    229 	.globl _CKCON1
                                    230 	.globl _CKCON0
                                    231 	.globl _CKRL
                                    232 	.globl _AUXR1
                                    233 	.globl _AUXR
                                    234 	.globl _TH2
                                    235 	.globl _TL2
                                    236 	.globl _RCAP2H
                                    237 	.globl _RCAP2L
                                    238 	.globl _T2CON
                                    239 	.globl _mino
                                    240 	.globl _minz
                                    241 	.globl _seco
                                    242 	.globl _secz
                                    243 	.globl _msec
                                    244 	.globl _counter
                                    245 	.globl _lcd_ptr
                                    246 	.globl _saved_address
                                    247 ;--------------------------------------------------------
                                    248 ; special function registers
                                    249 ;--------------------------------------------------------
                                    250 	.area RSEG    (ABS,DATA)
      000000                        251 	.org 0x0000
                           0000C8   252 _T2CON	=	0x00c8
                           0000CA   253 _RCAP2L	=	0x00ca
                           0000CB   254 _RCAP2H	=	0x00cb
                           0000CC   255 _TL2	=	0x00cc
                           0000CD   256 _TH2	=	0x00cd
                           00008E   257 _AUXR	=	0x008e
                           0000A2   258 _AUXR1	=	0x00a2
                           000097   259 _CKRL	=	0x0097
                           00008F   260 _CKCON0	=	0x008f
                           0000AF   261 _CKCON1	=	0x00af
                           0000FA   262 _CCAP0H	=	0x00fa
                           0000FB   263 _CCAP1H	=	0x00fb
                           0000FC   264 _CCAP2H	=	0x00fc
                           0000FD   265 _CCAP3H	=	0x00fd
                           0000FE   266 _CCAP4H	=	0x00fe
                           0000EA   267 _CCAP0L	=	0x00ea
                           0000EB   268 _CCAP1L	=	0x00eb
                           0000EC   269 _CCAP2L	=	0x00ec
                           0000ED   270 _CCAP3L	=	0x00ed
                           0000EE   271 _CCAP4L	=	0x00ee
                           0000DA   272 _CCAPM0	=	0x00da
                           0000DB   273 _CCAPM1	=	0x00db
                           0000DC   274 _CCAPM2	=	0x00dc
                           0000DD   275 _CCAPM3	=	0x00dd
                           0000DE   276 _CCAPM4	=	0x00de
                           0000D8   277 _CCON	=	0x00d8
                           0000F9   278 _CH	=	0x00f9
                           0000E9   279 _CL	=	0x00e9
                           0000D9   280 _CMOD	=	0x00d9
                           0000A8   281 _IEN0	=	0x00a8
                           0000B1   282 _IEN1	=	0x00b1
                           0000B8   283 _IPL0	=	0x00b8
                           0000B7   284 _IPH0	=	0x00b7
                           0000B2   285 _IPL1	=	0x00b2
                           0000B3   286 _IPH1	=	0x00b3
                           0000C0   287 _P4	=	0x00c0
                           0000E8   288 _P5	=	0x00e8
                           0000A6   289 _WDTRST	=	0x00a6
                           0000A7   290 _WDTPRG	=	0x00a7
                           0000A9   291 _SADDR	=	0x00a9
                           0000B9   292 _SADEN	=	0x00b9
                           0000C3   293 _SPCON	=	0x00c3
                           0000C4   294 _SPSTA	=	0x00c4
                           0000C5   295 _SPDAT	=	0x00c5
                           0000C9   296 _T2MOD	=	0x00c9
                           00009B   297 _BDRCON	=	0x009b
                           00009A   298 _BRL	=	0x009a
                           00009C   299 _KBLS	=	0x009c
                           00009D   300 _KBE	=	0x009d
                           00009E   301 _KBF	=	0x009e
                           0000D2   302 _EECON	=	0x00d2
                           0000E0   303 _ACC	=	0x00e0
                           0000F0   304 _B	=	0x00f0
                           000083   305 _DPH	=	0x0083
                           000083   306 _DP0H	=	0x0083
                           000082   307 _DPL	=	0x0082
                           000082   308 _DP0L	=	0x0082
                           0000A8   309 _IE	=	0x00a8
                           0000B8   310 _IP	=	0x00b8
                           000080   311 _P0	=	0x0080
                           000090   312 _P1	=	0x0090
                           0000A0   313 _P2	=	0x00a0
                           0000B0   314 _P3	=	0x00b0
                           000087   315 _PCON	=	0x0087
                           0000D0   316 _PSW	=	0x00d0
                           000099   317 _SBUF	=	0x0099
                           000099   318 _SBUF0	=	0x0099
                           000098   319 _SCON	=	0x0098
                           000081   320 _SP	=	0x0081
                           000088   321 _TCON	=	0x0088
                           00008C   322 _TH0	=	0x008c
                           00008D   323 _TH1	=	0x008d
                           00008A   324 _TL0	=	0x008a
                           00008B   325 _TL1	=	0x008b
                           000089   326 _TMOD	=	0x0089
                                    327 ;--------------------------------------------------------
                                    328 ; special function bits
                                    329 ;--------------------------------------------------------
                                    330 	.area RSEG    (ABS,DATA)
      000000                        331 	.org 0x0000
                           0000AD   332 _ET2	=	0x00ad
                           0000BD   333 _PT2	=	0x00bd
                           0000C8   334 _T2CON_0	=	0x00c8
                           0000C9   335 _T2CON_1	=	0x00c9
                           0000CA   336 _T2CON_2	=	0x00ca
                           0000CB   337 _T2CON_3	=	0x00cb
                           0000CC   338 _T2CON_4	=	0x00cc
                           0000CD   339 _T2CON_5	=	0x00cd
                           0000CE   340 _T2CON_6	=	0x00ce
                           0000CF   341 _T2CON_7	=	0x00cf
                           0000C8   342 _CP_RL2	=	0x00c8
                           0000C9   343 _C_T2	=	0x00c9
                           0000CA   344 _TR2	=	0x00ca
                           0000CB   345 _EXEN2	=	0x00cb
                           0000CC   346 _TCLK	=	0x00cc
                           0000CD   347 _RCLK	=	0x00cd
                           0000CE   348 _EXF2	=	0x00ce
                           0000CF   349 _TF2	=	0x00cf
                           0000DF   350 _CF	=	0x00df
                           0000DE   351 _CR	=	0x00de
                           0000DC   352 _CCF4	=	0x00dc
                           0000DB   353 _CCF3	=	0x00db
                           0000DA   354 _CCF2	=	0x00da
                           0000D9   355 _CCF1	=	0x00d9
                           0000D8   356 _CCF0	=	0x00d8
                           0000AE   357 _EC	=	0x00ae
                           0000BE   358 _PPCL	=	0x00be
                           0000BD   359 _PT2L	=	0x00bd
                           0000BC   360 _PSL	=	0x00bc
                           0000BB   361 _PT1L	=	0x00bb
                           0000BA   362 _PX1L	=	0x00ba
                           0000B9   363 _PT0L	=	0x00b9
                           0000B8   364 _PX0L	=	0x00b8
                           0000C0   365 _P4_0	=	0x00c0
                           0000C1   366 _P4_1	=	0x00c1
                           0000C2   367 _P4_2	=	0x00c2
                           0000C3   368 _P4_3	=	0x00c3
                           0000C4   369 _P4_4	=	0x00c4
                           0000C5   370 _P4_5	=	0x00c5
                           0000C6   371 _P4_6	=	0x00c6
                           0000C7   372 _P4_7	=	0x00c7
                           0000E8   373 _P5_0	=	0x00e8
                           0000E9   374 _P5_1	=	0x00e9
                           0000EA   375 _P5_2	=	0x00ea
                           0000EB   376 _P5_3	=	0x00eb
                           0000EC   377 _P5_4	=	0x00ec
                           0000ED   378 _P5_5	=	0x00ed
                           0000EE   379 _P5_6	=	0x00ee
                           0000EF   380 _P5_7	=	0x00ef
                           0000F0   381 _BREG_F0	=	0x00f0
                           0000F1   382 _BREG_F1	=	0x00f1
                           0000F2   383 _BREG_F2	=	0x00f2
                           0000F3   384 _BREG_F3	=	0x00f3
                           0000F4   385 _BREG_F4	=	0x00f4
                           0000F5   386 _BREG_F5	=	0x00f5
                           0000F6   387 _BREG_F6	=	0x00f6
                           0000F7   388 _BREG_F7	=	0x00f7
                           0000A8   389 _EX0	=	0x00a8
                           0000A9   390 _ET0	=	0x00a9
                           0000AA   391 _EX1	=	0x00aa
                           0000AB   392 _ET1	=	0x00ab
                           0000AC   393 _ES	=	0x00ac
                           0000AF   394 _EA	=	0x00af
                           0000B8   395 _PX0	=	0x00b8
                           0000B9   396 _PT0	=	0x00b9
                           0000BA   397 _PX1	=	0x00ba
                           0000BB   398 _PT1	=	0x00bb
                           0000BC   399 _PS	=	0x00bc
                           000080   400 _P0_0	=	0x0080
                           000081   401 _P0_1	=	0x0081
                           000082   402 _P0_2	=	0x0082
                           000083   403 _P0_3	=	0x0083
                           000084   404 _P0_4	=	0x0084
                           000085   405 _P0_5	=	0x0085
                           000086   406 _P0_6	=	0x0086
                           000087   407 _P0_7	=	0x0087
                           000090   408 _P1_0	=	0x0090
                           000091   409 _P1_1	=	0x0091
                           000092   410 _P1_2	=	0x0092
                           000093   411 _P1_3	=	0x0093
                           000094   412 _P1_4	=	0x0094
                           000095   413 _P1_5	=	0x0095
                           000096   414 _P1_6	=	0x0096
                           000097   415 _P1_7	=	0x0097
                           0000A0   416 _P2_0	=	0x00a0
                           0000A1   417 _P2_1	=	0x00a1
                           0000A2   418 _P2_2	=	0x00a2
                           0000A3   419 _P2_3	=	0x00a3
                           0000A4   420 _P2_4	=	0x00a4
                           0000A5   421 _P2_5	=	0x00a5
                           0000A6   422 _P2_6	=	0x00a6
                           0000A7   423 _P2_7	=	0x00a7
                           0000B0   424 _P3_0	=	0x00b0
                           0000B1   425 _P3_1	=	0x00b1
                           0000B2   426 _P3_2	=	0x00b2
                           0000B3   427 _P3_3	=	0x00b3
                           0000B4   428 _P3_4	=	0x00b4
                           0000B5   429 _P3_5	=	0x00b5
                           0000B6   430 _P3_6	=	0x00b6
                           0000B7   431 _P3_7	=	0x00b7
                           0000B0   432 _RXD	=	0x00b0
                           0000B0   433 _RXD0	=	0x00b0
                           0000B1   434 _TXD	=	0x00b1
                           0000B1   435 _TXD0	=	0x00b1
                           0000B2   436 _INT0	=	0x00b2
                           0000B3   437 _INT1	=	0x00b3
                           0000B4   438 _T0	=	0x00b4
                           0000B5   439 _T1	=	0x00b5
                           0000B6   440 _WR	=	0x00b6
                           0000B7   441 _RD	=	0x00b7
                           0000D0   442 _P	=	0x00d0
                           0000D1   443 _F1	=	0x00d1
                           0000D2   444 _OV	=	0x00d2
                           0000D3   445 _RS0	=	0x00d3
                           0000D4   446 _RS1	=	0x00d4
                           0000D5   447 _F0	=	0x00d5
                           0000D6   448 _AC	=	0x00d6
                           0000D7   449 _CY	=	0x00d7
                           000098   450 _RI	=	0x0098
                           000099   451 _TI	=	0x0099
                           00009A   452 _RB8	=	0x009a
                           00009B   453 _TB8	=	0x009b
                           00009C   454 _REN	=	0x009c
                           00009D   455 _SM2	=	0x009d
                           00009E   456 _SM1	=	0x009e
                           00009F   457 _SM0	=	0x009f
                           000088   458 _IT0	=	0x0088
                           000089   459 _IE0	=	0x0089
                           00008A   460 _IT1	=	0x008a
                           00008B   461 _IE1	=	0x008b
                           00008C   462 _TR0	=	0x008c
                           00008D   463 _TF0	=	0x008d
                           00008E   464 _TR1	=	0x008e
                           00008F   465 _TF1	=	0x008f
                                    466 ;--------------------------------------------------------
                                    467 ; overlayable register banks
                                    468 ;--------------------------------------------------------
                                    469 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        470 	.ds 8
                                    471 ;--------------------------------------------------------
                                    472 ; overlayable bit register bank
                                    473 ;--------------------------------------------------------
                                    474 	.area BIT_BANK	(REL,OVR,DATA)
      000000                        475 bits:
      000000                        476 	.ds 1
                           008000   477 	b0 = bits[0]
                           008100   478 	b1 = bits[1]
                           008200   479 	b2 = bits[2]
                           008300   480 	b3 = bits[3]
                           008400   481 	b4 = bits[4]
                           008500   482 	b5 = bits[5]
                           008600   483 	b6 = bits[6]
                           008700   484 	b7 = bits[7]
                                    485 ;--------------------------------------------------------
                                    486 ; internal ram data
                                    487 ;--------------------------------------------------------
                                    488 	.area DSEG    (DATA)
                                    489 ;--------------------------------------------------------
                                    490 ; overlayable items in internal ram 
                                    491 ;--------------------------------------------------------
                                    492 ;--------------------------------------------------------
                                    493 ; Stack segment in internal ram 
                                    494 ;--------------------------------------------------------
                                    495 	.area	SSEG
      000000                        496 __start__stack:
      000000                        497 	.ds	1
                                    498 
                                    499 ;--------------------------------------------------------
                                    500 ; indirectly addressable internal ram data
                                    501 ;--------------------------------------------------------
                                    502 	.area ISEG    (DATA)
                                    503 ;--------------------------------------------------------
                                    504 ; absolute internal ram data
                                    505 ;--------------------------------------------------------
                                    506 	.area IABS    (ABS,DATA)
                                    507 	.area IABS    (ABS,DATA)
                                    508 ;--------------------------------------------------------
                                    509 ; bit data
                                    510 ;--------------------------------------------------------
                                    511 	.area BSEG    (BIT)
                                    512 ;--------------------------------------------------------
                                    513 ; paged external ram data
                                    514 ;--------------------------------------------------------
                                    515 	.area PSEG    (PAG,XDATA)
                                    516 ;--------------------------------------------------------
                                    517 ; external ram data
                                    518 ;--------------------------------------------------------
                                    519 	.area XSEG    (XDATA)
      000000                        520 _saved_address::
      000000                        521 	.ds 1
                           008000   522 _lcd_ptr	=	0x8000
      000001                        523 _timer0_ISR_i_65537_82:
      000001                        524 	.ds 2
      000003                        525 _main_input_array_65536_89:
      000003                        526 	.ds 3
      000006                        527 _main_arr_input_65536_89:
      000006                        528 	.ds 16
      000016                        529 _main_eol_check_196615_104:
      000016                        530 	.ds 2
      000018                        531 _main_x_196616_110:
      000018                        532 	.ds 2
      00001A                        533 _main_y_196617_111:
      00001A                        534 	.ds 2
                                    535 ;--------------------------------------------------------
                                    536 ; absolute external ram data
                                    537 ;--------------------------------------------------------
                                    538 	.area XABS    (ABS,XDATA)
                                    539 ;--------------------------------------------------------
                                    540 ; external initialized ram data
                                    541 ;--------------------------------------------------------
                                    542 	.area XISEG   (XDATA)
      000000                        543 _counter::
      000000                        544 	.ds 2
      000002                        545 _msec::
      000002                        546 	.ds 1
      000003                        547 _secz::
      000003                        548 	.ds 1
      000004                        549 _seco::
      000004                        550 	.ds 1
      000005                        551 _minz::
      000005                        552 	.ds 1
      000006                        553 _mino::
      000006                        554 	.ds 1
                                    555 	.area HOME    (CODE)
                                    556 	.area GSINIT0 (CODE)
                                    557 	.area GSINIT1 (CODE)
                                    558 	.area GSINIT2 (CODE)
                                    559 	.area GSINIT3 (CODE)
                                    560 	.area GSINIT4 (CODE)
                                    561 	.area GSINIT5 (CODE)
                                    562 	.area GSINIT  (CODE)
                                    563 	.area GSFINAL (CODE)
                                    564 	.area CSEG    (CODE)
                                    565 ;--------------------------------------------------------
                                    566 ; interrupt vector 
                                    567 ;--------------------------------------------------------
                                    568 	.area HOME    (CODE)
      000000                        569 __interrupt_vect:
      000000 02r00r00         [24]  570 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  571 	reti
      000004                        572 	.ds	7
      00000B 02r00r17         [24]  573 	ljmp	_timer0_ISR
                                    574 ;--------------------------------------------------------
                                    575 ; global & static initialisations
                                    576 ;--------------------------------------------------------
                                    577 	.area HOME    (CODE)
                                    578 	.area GSINIT  (CODE)
                                    579 	.area GSFINAL (CODE)
                                    580 	.area GSINIT  (CODE)
                                    581 	.globl __sdcc_gsinit_startup
                                    582 	.globl __sdcc_program_startup
                                    583 	.globl __start__stack
                                    584 	.globl __mcs51_genXINIT
                                    585 	.globl __mcs51_genXRAMCLEAR
                                    586 	.globl __mcs51_genRAMCLEAR
                                    587 ;------------------------------------------------------------
                                    588 ;Allocation info for local variables in function 'timer0_ISR'
                                    589 ;------------------------------------------------------------
                                    590 ;i                         Allocated with name '_timer0_ISR_i_65537_82'
                                    591 ;t                         Allocated with name '_timer0_ISR_t_65537_82'
                                    592 ;------------------------------------------------------------
                                    593 ;	main.c:45: static int i = 0;
      000000 90r00r01         [24]  594 	mov	dptr,#_timer0_ISR_i_65537_82
      000003 E4               [12]  595 	clr	a
      000004 F0               [24]  596 	movx	@dptr,a
      000005 A3               [24]  597 	inc	dptr
      000006 F0               [24]  598 	movx	@dptr,a
                                    599 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  600 	ljmp	__sdcc_program_startup
                                    601 ;--------------------------------------------------------
                                    602 ; Home
                                    603 ;--------------------------------------------------------
                                    604 	.area HOME    (CODE)
                                    605 	.area HOME    (CODE)
      00000E                        606 __sdcc_program_startup:
      00000E 02r01r57         [24]  607 	ljmp	_main
                                    608 ;	return from main will return to caller
                                    609 ;--------------------------------------------------------
                                    610 ; code
                                    611 ;--------------------------------------------------------
                                    612 	.area CSEG    (CODE)
                                    613 ;------------------------------------------------------------
                                    614 ;Allocation info for local variables in function '_sdcc_external_startup'
                                    615 ;------------------------------------------------------------
                                    616 ;	main.c:16: _sdcc_external_startup()
                                    617 ;	-----------------------------------------
                                    618 ;	 function _sdcc_external_startup
                                    619 ;	-----------------------------------------
      000000                        620 __sdcc_external_startup:
                           000007   621 	ar7 = 0x07
                           000006   622 	ar6 = 0x06
                           000005   623 	ar5 = 0x05
                           000004   624 	ar4 = 0x04
                           000003   625 	ar3 = 0x03
                           000002   626 	ar2 = 0x02
                           000001   627 	ar1 = 0x01
                           000000   628 	ar0 = 0x00
                                    629 ;	main.c:18: AUXR|=0x0C; //for 1kB memory
      000000 43 8E 0C         [24]  630 	orl	_AUXR,#0x0c
                                    631 ;	main.c:19: return 0;
      000003 90 00 00         [24]  632 	mov	dptr,#0x0000
                                    633 ;	main.c:20: }
      000006 22               [24]  634 	ret
                                    635 ;------------------------------------------------------------
                                    636 ;Allocation info for local variables in function 'timer0_init'
                                    637 ;------------------------------------------------------------
                                    638 ;	main.c:26: void timer0_init()
                                    639 ;	-----------------------------------------
                                    640 ;	 function timer0_init
                                    641 ;	-----------------------------------------
      000007                        642 _timer0_init:
                                    643 ;	main.c:28: TMOD |= 0x01; // set the mode for timer 0
      000007 43 89 01         [24]  644 	orl	_TMOD,#0x01
                                    645 ;	main.c:29: TL0=0x00; // set the low value of timer
      00000A 75 8A 00         [24]  646 	mov	_TL0,#0x00
                                    647 ;	main.c:30: TH0=0x00; // set the high value of timer
      00000D 75 8C 00         [24]  648 	mov	_TH0,#0x00
                                    649 ;	main.c:31: EA = 1; // Enable global interrupts
                                    650 ;	assignBit
      000010 D2 AF            [12]  651 	setb	_EA
                                    652 ;	main.c:32: ET0 = 1;
                                    653 ;	assignBit
      000012 D2 A9            [12]  654 	setb	_ET0
                                    655 ;	main.c:33: TR0 = 1; //enable timer interrupts
                                    656 ;	assignBit
      000014 D2 8C            [12]  657 	setb	_TR0
                                    658 ;	main.c:34: }
      000016 22               [24]  659 	ret
                                    660 ;------------------------------------------------------------
                                    661 ;Allocation info for local variables in function 'timer0_ISR'
                                    662 ;------------------------------------------------------------
                                    663 ;i                         Allocated with name '_timer0_ISR_i_65537_82'
                                    664 ;t                         Allocated with name '_timer0_ISR_t_65537_82'
                                    665 ;------------------------------------------------------------
                                    666 ;	main.c:41: void timer0_ISR() __interrupt(1)
                                    667 ;	-----------------------------------------
                                    668 ;	 function timer0_ISR
                                    669 ;	-----------------------------------------
      000017                        670 _timer0_ISR:
      000017 C0*00            [24]  671 	push	bits
      000019 C0 E0            [24]  672 	push	acc
      00001B C0 F0            [24]  673 	push	b
      00001D C0 82            [24]  674 	push	dpl
      00001F C0 83            [24]  675 	push	dph
      000021 C0 07            [24]  676 	push	(0+7)
      000023 C0 06            [24]  677 	push	(0+6)
      000025 C0 05            [24]  678 	push	(0+5)
      000027 C0 04            [24]  679 	push	(0+4)
      000029 C0 03            [24]  680 	push	(0+3)
      00002B C0 02            [24]  681 	push	(0+2)
      00002D C0 01            [24]  682 	push	(0+1)
      00002F C0 00            [24]  683 	push	(0+0)
      000031 C0 D0            [24]  684 	push	psw
      000033 75 D0 00         [24]  685 	mov	psw,#0x00
                                    686 ;	main.c:44: saved_address = get_cursor_address();
      000036 12r00r00         [24]  687 	lcall	_get_cursor_address
      000039 E5 82            [12]  688 	mov	a,dpl
      00003B 90r00r00         [24]  689 	mov	dptr,#_saved_address
      00003E F0               [24]  690 	movx	@dptr,a
                                    691 ;	main.c:47: while(t--);
      00003F 7E 98            [12]  692 	mov	r6,#0x98
      000041 7F 08            [12]  693 	mov	r7,#0x08
      000043                        694 00101$:
      000043 8E 04            [24]  695 	mov	ar4,r6
      000045 8F 05            [24]  696 	mov	ar5,r7
      000047 1E               [12]  697 	dec	r6
      000048 BE FF 01         [24]  698 	cjne	r6,#0xff,00145$
      00004B 1F               [12]  699 	dec	r7
      00004C                        700 00145$:
      00004C EC               [12]  701 	mov	a,r4
      00004D 4D               [12]  702 	orl	a,r5
      00004E 70 F3            [24]  703 	jnz	00101$
                                    704 ;	main.c:48: i++;
      000050 90r00r01         [24]  705 	mov	dptr,#_timer0_ISR_i_65537_82
      000053 E0               [24]  706 	movx	a,@dptr
      000054 24 01            [12]  707 	add	a,#0x01
      000056 F0               [24]  708 	movx	@dptr,a
      000057 A3               [24]  709 	inc	dptr
      000058 E0               [24]  710 	movx	a,@dptr
      000059 34 00            [12]  711 	addc	a,#0x00
      00005B F0               [24]  712 	movx	@dptr,a
                                    713 ;	main.c:50: if (i == 1)
      00005C 90r00r01         [24]  714 	mov	dptr,#_timer0_ISR_i_65537_82
      00005F E0               [24]  715 	movx	a,@dptr
      000060 FE               [12]  716 	mov	r6,a
      000061 A3               [24]  717 	inc	dptr
      000062 E0               [24]  718 	movx	a,@dptr
      000063 FF               [12]  719 	mov	r7,a
      000064 BE 01 05         [24]  720 	cjne	r6,#0x01,00147$
      000067 BF 00 02         [24]  721 	cjne	r7,#0x00,00147$
      00006A 80 03            [24]  722 	sjmp	00148$
      00006C                        723 00147$:
      00006C 02r01r29         [24]  724 	ljmp	00113$
      00006F                        725 00148$:
                                    726 ;	main.c:52: i= 0;
      00006F 90r00r01         [24]  727 	mov	dptr,#_timer0_ISR_i_65537_82
      000072 E4               [12]  728 	clr	a
      000073 F0               [24]  729 	movx	@dptr,a
      000074 A3               [24]  730 	inc	dptr
      000075 F0               [24]  731 	movx	@dptr,a
                                    732 ;	main.c:54: msec++;
      000076 90r00r02         [24]  733 	mov	dptr,#_msec
      000079 E0               [24]  734 	movx	a,@dptr
      00007A 04               [12]  735 	inc	a
      00007B F0               [24]  736 	movx	@dptr,a
                                    737 ;	main.c:55: if (msec == 10)
      00007C E0               [24]  738 	movx	a,@dptr
      00007D FF               [12]  739 	mov	r7,a
      00007E BF 0A 3B         [24]  740 	cjne	r7,#0x0a,00111$
                                    741 ;	main.c:57: msec = 0;
      000081 90r00r02         [24]  742 	mov	dptr,#_msec
      000084 E4               [12]  743 	clr	a
      000085 F0               [24]  744 	movx	@dptr,a
                                    745 ;	main.c:58: secz++;
      000086 90r00r03         [24]  746 	mov	dptr,#_secz
      000089 E0               [24]  747 	movx	a,@dptr
      00008A 04               [12]  748 	inc	a
      00008B F0               [24]  749 	movx	@dptr,a
                                    750 ;	main.c:60: if (secz == 10)
      00008C E0               [24]  751 	movx	a,@dptr
      00008D FF               [12]  752 	mov	r7,a
      00008E BF 0A 2B         [24]  753 	cjne	r7,#0x0a,00111$
                                    754 ;	main.c:62: secz = 0;
      000091 90r00r03         [24]  755 	mov	dptr,#_secz
      000094 E4               [12]  756 	clr	a
      000095 F0               [24]  757 	movx	@dptr,a
                                    758 ;	main.c:64: seco++;
      000096 90r00r04         [24]  759 	mov	dptr,#_seco
      000099 E0               [24]  760 	movx	a,@dptr
      00009A 04               [12]  761 	inc	a
      00009B F0               [24]  762 	movx	@dptr,a
                                    763 ;	main.c:65: if (seco == 6)
      00009C E0               [24]  764 	movx	a,@dptr
      00009D FF               [12]  765 	mov	r7,a
      00009E BF 06 1B         [24]  766 	cjne	r7,#0x06,00111$
                                    767 ;	main.c:67: seco = 0;
      0000A1 90r00r04         [24]  768 	mov	dptr,#_seco
      0000A4 E4               [12]  769 	clr	a
      0000A5 F0               [24]  770 	movx	@dptr,a
                                    771 ;	main.c:69: minz++;
      0000A6 90r00r05         [24]  772 	mov	dptr,#_minz
      0000A9 E0               [24]  773 	movx	a,@dptr
      0000AA 04               [12]  774 	inc	a
      0000AB F0               [24]  775 	movx	@dptr,a
                                    776 ;	main.c:70: if (minz == 10)
      0000AC E0               [24]  777 	movx	a,@dptr
      0000AD FF               [12]  778 	mov	r7,a
      0000AE BF 0A 0B         [24]  779 	cjne	r7,#0x0a,00111$
                                    780 ;	main.c:72: minz=0;
      0000B1 90r00r05         [24]  781 	mov	dptr,#_minz
      0000B4 E4               [12]  782 	clr	a
      0000B5 F0               [24]  783 	movx	@dptr,a
                                    784 ;	main.c:74: mino++;
      0000B6 90r00r06         [24]  785 	mov	dptr,#_mino
      0000B9 E0               [24]  786 	movx	a,@dptr
      0000BA 04               [12]  787 	inc	a
      0000BB F0               [24]  788 	movx	@dptr,a
      0000BC                        789 00111$:
                                    790 ;	main.c:80: lcdgotoaddr(0x59);
      0000BC 75 82 59         [24]  791 	mov	dpl,#0x59
      0000BF 12r00r00         [24]  792 	lcall	_lcdgotoaddr
                                    793 ;	main.c:81: lcdputch((char)mino+ '0');
      0000C2 90r00r06         [24]  794 	mov	dptr,#_mino
      0000C5 E0               [24]  795 	movx	a,@dptr
      0000C6 24 30            [12]  796 	add	a,#0x30
      0000C8 F5 82            [12]  797 	mov	dpl,a
      0000CA 12r00r00         [24]  798 	lcall	_lcdputch
                                    799 ;	main.c:82: lcdgotoaddr(0x5A);
      0000CD 75 82 5A         [24]  800 	mov	dpl,#0x5a
      0000D0 12r00r00         [24]  801 	lcall	_lcdgotoaddr
                                    802 ;	main.c:83: lcdputch((char)minz+ '0');
      0000D3 90r00r05         [24]  803 	mov	dptr,#_minz
      0000D6 E0               [24]  804 	movx	a,@dptr
      0000D7 24 30            [12]  805 	add	a,#0x30
      0000D9 F5 82            [12]  806 	mov	dpl,a
      0000DB 12r00r00         [24]  807 	lcall	_lcdputch
                                    808 ;	main.c:84: lcdgotoaddr(0x5B);
      0000DE 75 82 5B         [24]  809 	mov	dpl,#0x5b
      0000E1 12r00r00         [24]  810 	lcall	_lcdgotoaddr
                                    811 ;	main.c:85: lcdputch((char)58);
      0000E4 75 82 3A         [24]  812 	mov	dpl,#0x3a
      0000E7 12r00r00         [24]  813 	lcall	_lcdputch
                                    814 ;	main.c:86: lcdgotoaddr(0x5C);
      0000EA 75 82 5C         [24]  815 	mov	dpl,#0x5c
      0000ED 12r00r00         [24]  816 	lcall	_lcdgotoaddr
                                    817 ;	main.c:87: lcdputch((char)seco+ '0');
      0000F0 90r00r04         [24]  818 	mov	dptr,#_seco
      0000F3 E0               [24]  819 	movx	a,@dptr
      0000F4 24 30            [12]  820 	add	a,#0x30
      0000F6 F5 82            [12]  821 	mov	dpl,a
      0000F8 12r00r00         [24]  822 	lcall	_lcdputch
                                    823 ;	main.c:88: lcdgotoaddr(0x5D);
      0000FB 75 82 5D         [24]  824 	mov	dpl,#0x5d
      0000FE 12r00r00         [24]  825 	lcall	_lcdgotoaddr
                                    826 ;	main.c:89: lcdputch((char)secz+ '0');
      000101 90r00r03         [24]  827 	mov	dptr,#_secz
      000104 E0               [24]  828 	movx	a,@dptr
      000105 24 30            [12]  829 	add	a,#0x30
      000107 F5 82            [12]  830 	mov	dpl,a
      000109 12r00r00         [24]  831 	lcall	_lcdputch
                                    832 ;	main.c:90: lcdgotoaddr(0x5E);
      00010C 75 82 5E         [24]  833 	mov	dpl,#0x5e
      00010F 12r00r00         [24]  834 	lcall	_lcdgotoaddr
                                    835 ;	main.c:91: lcdputch((char)46);
      000112 75 82 2E         [24]  836 	mov	dpl,#0x2e
      000115 12r00r00         [24]  837 	lcall	_lcdputch
                                    838 ;	main.c:92: lcdgotoaddr(0x5F);
      000118 75 82 5F         [24]  839 	mov	dpl,#0x5f
      00011B 12r00r00         [24]  840 	lcall	_lcdgotoaddr
                                    841 ;	main.c:93: lcdputch((char)msec+ '0');
      00011E 90r00r02         [24]  842 	mov	dptr,#_msec
      000121 E0               [24]  843 	movx	a,@dptr
      000122 24 30            [12]  844 	add	a,#0x30
      000124 F5 82            [12]  845 	mov	dpl,a
      000126 12r00r00         [24]  846 	lcall	_lcdputch
      000129                        847 00113$:
                                    848 ;	main.c:95: lcdgotoaddr(saved_address); //pop out the saved address
      000129 90r00r00         [24]  849 	mov	dptr,#_saved_address
      00012C E0               [24]  850 	movx	a,@dptr
      00012D F5 82            [12]  851 	mov	dpl,a
      00012F 12r00r00         [24]  852 	lcall	_lcdgotoaddr
                                    853 ;	main.c:96: TL0=0x00; // set the low value of timer
      000132 75 8A 00         [24]  854 	mov	_TL0,#0x00
                                    855 ;	main.c:97: TH0=0x00; // set the high value of timer
      000135 75 8C 00         [24]  856 	mov	_TH0,#0x00
                                    857 ;	main.c:98: TF0=0; //clear overflow flag
                                    858 ;	assignBit
      000138 C2 8D            [12]  859 	clr	_TF0
                                    860 ;	main.c:99: }
      00013A D0 D0            [24]  861 	pop	psw
      00013C D0 00            [24]  862 	pop	(0+0)
      00013E D0 01            [24]  863 	pop	(0+1)
      000140 D0 02            [24]  864 	pop	(0+2)
      000142 D0 03            [24]  865 	pop	(0+3)
      000144 D0 04            [24]  866 	pop	(0+4)
      000146 D0 05            [24]  867 	pop	(0+5)
      000148 D0 06            [24]  868 	pop	(0+6)
      00014A D0 07            [24]  869 	pop	(0+7)
      00014C D0 83            [24]  870 	pop	dph
      00014E D0 82            [24]  871 	pop	dpl
      000150 D0 F0            [24]  872 	pop	b
      000152 D0 E0            [24]  873 	pop	acc
      000154 D0*00            [24]  874 	pop	bits
      000156 32               [24]  875 	reti
                                    876 ;------------------------------------------------------------
                                    877 ;Allocation info for local variables in function 'main'
                                    878 ;------------------------------------------------------------
                                    879 ;input_array               Allocated with name '_main_input_array_65536_89'
                                    880 ;arr_input                 Allocated with name '_main_arr_input_65536_89'
                                    881 ;block_size                Allocated with name '_main_block_size_65536_89'
                                    882 ;input                     Allocated with name '_main_input_65537_91'
                                    883 ;string                    Allocated with name '_main_string_65538_92'
                                    884 ;input                     Allocated with name '_main_input_131075_94'
                                    885 ;row                       Allocated with name '_main_row_196612_97'
                                    886 ;column                    Allocated with name '_main_column_196613_98'
                                    887 ;lcd_input                 Allocated with name '_main_lcd_input_196614_102'
                                    888 ;eol_check                 Allocated with name '_main_eol_check_196615_104'
                                    889 ;i                         Allocated with name '_main_i_196615_104'
                                    890 ;ch                        Allocated with name '_main_ch_262151_105'
                                    891 ;sum                       Allocated with name '_main_sum_196616_110'
                                    892 ;x                         Allocated with name '_main_x_196616_110'
                                    893 ;y                         Allocated with name '_main_y_196617_111'
                                    894 ;ch_code                   Allocated with name '_main_ch_code_196618_115'
                                    895 ;j                         Allocated with name '_main_j_262154_116'
                                    896 ;i                         Allocated with name '_main_i_262154_119'
                                    897 ;------------------------------------------------------------
                                    898 ;	main.c:105: void main(void)
                                    899 ;	-----------------------------------------
                                    900 ;	 function main
                                    901 ;	-----------------------------------------
      000157                        902 _main:
                                    903 ;	main.c:111: lcdinit();
      000157 12r00r00         [24]  904 	lcall	_lcdinit
                                    905 ;	main.c:112: EA = 1;
                                    906 ;	assignBit
      00015A D2 AF            [12]  907 	setb	_EA
                                    908 ;	main.c:121: }
      00015C 7F 01            [12]  909 	mov	r7,#0x01
      00015E 10 AF 02         [24]  910 	jbc	ea,00310$
      000161 7F 00            [12]  911 	mov	r7,#0x00
      000163                        912 00310$:
                                    913 ;	main.c:116: msec = 0;
      000163 90r00r02         [24]  914 	mov	dptr,#_msec
      000166 E4               [12]  915 	clr	a
      000167 F0               [24]  916 	movx	@dptr,a
                                    917 ;	main.c:117: secz = 0;
      000168 90r00r03         [24]  918 	mov	dptr,#_secz
      00016B F0               [24]  919 	movx	@dptr,a
                                    920 ;	main.c:118: seco = 0;
      00016C 90r00r04         [24]  921 	mov	dptr,#_seco
      00016F F0               [24]  922 	movx	@dptr,a
                                    923 ;	main.c:119: minz = 0;
      000170 90r00r05         [24]  924 	mov	dptr,#_minz
      000173 F0               [24]  925 	movx	@dptr,a
                                    926 ;	main.c:120: mino = 0;
      000174 90r00r06         [24]  927 	mov	dptr,#_mino
      000177 F0               [24]  928 	movx	@dptr,a
      000178 EF               [12]  929 	mov	a,r7
      000179 13               [12]  930 	rrc	a
      00017A 92 AF            [24]  931 	mov	ea,c
                                    932 ;	main.c:123: timer0_init();
      00017C 12r00r07         [24]  933 	lcall	_timer0_init
                                    934 ;	main.c:124: const char* input = "MANDADI SAI CHARAN UCB ESD LAB 4 \0";
                                    935 ;	main.c:126: lcdinit();
      00017F 12r00r00         [24]  936 	lcall	_lcdinit
                                    937 ;	main.c:128: lcdgotoaddr(0x00);
      000182 75 82 00         [24]  938 	mov	dpl,#0x00
      000185 12r00r00         [24]  939 	lcall	_lcdgotoaddr
                                    940 ;	main.c:129: lcdputstr(input);
      000188 90r00r00         [24]  941 	mov	dptr,#___str_0
      00018B 75 F0 80         [24]  942 	mov	b,#0x80
      00018E 12r00r00         [24]  943 	lcall	_lcdputstr
                                    944 ;	main.c:132: while(1)
      000191                        945 00150$:
                                    946 ;	main.c:135: printf_tiny("Press H for the home menu\n\r");
      000191 74r23            [12]  947 	mov	a,#___str_1
      000193 C0 E0            [24]  948 	push	acc
      000195 74s00            [12]  949 	mov	a,#(___str_1 >> 8)
      000197 C0 E0            [24]  950 	push	acc
      000199 12r00r00         [24]  951 	lcall	_printf_tiny
      00019C 15 81            [12]  952 	dec	sp
      00019E 15 81            [12]  953 	dec	sp
                                    954 ;	main.c:136: printf_tiny("Enter a choice:    \n\r");
      0001A0 74r3F            [12]  955 	mov	a,#___str_2
      0001A2 C0 E0            [24]  956 	push	acc
      0001A4 74s00            [12]  957 	mov	a,#(___str_2 >> 8)
      0001A6 C0 E0            [24]  958 	push	acc
      0001A8 12r00r00         [24]  959 	lcall	_printf_tiny
      0001AB 15 81            [12]  960 	dec	sp
      0001AD 15 81            [12]  961 	dec	sp
                                    962 ;	main.c:139: uint8_t input=getchar();
      0001AF 12r00r00         [24]  963 	lcall	_getchar
      0001B2 AE 82            [24]  964 	mov	r6,dpl
                                    965 ;	main.c:140: printf_tiny("%c\n\r",input);
      0001B4 8E 05            [24]  966 	mov	ar5,r6
      0001B6 7F 00            [12]  967 	mov	r7,#0x00
      0001B8 C0 06            [24]  968 	push	ar6
      0001BA C0 05            [24]  969 	push	ar5
      0001BC C0 07            [24]  970 	push	ar7
      0001BE 74r55            [12]  971 	mov	a,#___str_3
      0001C0 C0 E0            [24]  972 	push	acc
      0001C2 74s00            [12]  973 	mov	a,#(___str_3 >> 8)
      0001C4 C0 E0            [24]  974 	push	acc
      0001C6 12r00r00         [24]  975 	lcall	_printf_tiny
      0001C9 E5 81            [12]  976 	mov	a,sp
      0001CB 24 FC            [12]  977 	add	a,#0xfc
      0001CD F5 81            [12]  978 	mov	sp,a
      0001CF D0 06            [24]  979 	pop	ar6
                                    980 ;	main.c:141: switch(input)
      0001D1 BE 42 03         [24]  981 	cjne	r6,#0x42,00311$
      0001D4 02r04rD5         [24]  982 	ljmp	00123$
      0001D7                        983 00311$:
      0001D7 BE 43 03         [24]  984 	cjne	r6,#0x43,00312$
      0001DA 02r03rEC         [24]  985 	ljmp	00115$
      0001DD                        986 00312$:
      0001DD BE 44 03         [24]  987 	cjne	r6,#0x44,00313$
      0001E0 02r06r9B         [24]  988 	ljmp	00140$
      0001E3                        989 00313$:
      0001E3 BE 45 03         [24]  990 	cjne	r6,#0x45,00314$
      0001E6 02r05r7E         [24]  991 	ljmp	00125$
      0001E9                        992 00314$:
      0001E9 BE 46 03         [24]  993 	cjne	r6,#0x46,00315$
      0001EC 02r06rA1         [24]  994 	ljmp	00141$
      0001EF                        995 00315$:
      0001EF BE 47 03         [24]  996 	cjne	r6,#0x47,00316$
      0001F2 02r05r8A         [24]  997 	ljmp	00127$
      0001F5                        998 00316$:
      0001F5 BE 48 02         [24]  999 	cjne	r6,#0x48,00317$
      0001F8 80 21            [24] 1000 	sjmp	00101$
      0001FA                       1001 00317$:
      0001FA BE 49 03         [24] 1002 	cjne	r6,#0x49,00318$
      0001FD 02r07rC3         [24] 1003 	ljmp	00146$
      000200                       1004 00318$:
      000200 BE 4A 03         [24] 1005 	cjne	r6,#0x4a,00319$
      000203 02r02rF0         [24] 1006 	ljmp	00102$
      000206                       1007 00319$:
      000206 BE 52 03         [24] 1008 	cjne	r6,#0x52,00320$
      000209 02r05r84         [24] 1009 	ljmp	00126$
      00020C                       1010 00320$:
      00020C BE 53 03         [24] 1011 	cjne	r6,#0x53,00321$
      00020F 02r04r34         [24] 1012 	ljmp	00116$
      000212                       1013 00321$:
      000212 BE 5A 03         [24] 1014 	cjne	r6,#0x5a,00322$
      000215 02r04rEA         [24] 1015 	ljmp	00124$
      000218                       1016 00322$:
      000218 02r01r91         [24] 1017 	ljmp	00150$
                                   1018 ;	main.c:143: case 'H':
      00021B                       1019 00101$:
                                   1020 ;	main.c:160: }
      00021B 7F 01            [12] 1021 	mov	r7,#0x01
      00021D 10 AF 02         [24] 1022 	jbc	ea,00323$
      000220 7F 00            [12] 1023 	mov	r7,#0x00
      000222                       1024 00323$:
                                   1025 ;	main.c:146: printf_tiny("*************Home Menu***************");
      000222 C0 07            [24] 1026 	push	ar7
      000224 74r5A            [12] 1027 	mov	a,#___str_4
      000226 C0 E0            [24] 1028 	push	acc
      000228 74s00            [12] 1029 	mov	a,#(___str_4 >> 8)
      00022A C0 E0            [24] 1030 	push	acc
      00022C 12r00r00         [24] 1031 	lcall	_printf_tiny
      00022F 15 81            [12] 1032 	dec	sp
      000231 15 81            [12] 1033 	dec	sp
                                   1034 ;	main.c:148: printf_tiny("\n\rEnter J to go to desired coordinate)\n\r");
      000233 74r80            [12] 1035 	mov	a,#___str_5
      000235 C0 E0            [24] 1036 	push	acc
      000237 74s00            [12] 1037 	mov	a,#(___str_5 >> 8)
      000239 C0 E0            [24] 1038 	push	acc
      00023B 12r00r00         [24] 1039 	lcall	_printf_tiny
      00023E 15 81            [12] 1040 	dec	sp
      000240 15 81            [12] 1041 	dec	sp
                                   1042 ;	main.c:149: printf_tiny("\n\rPress C to print desired character on LCD\n\r");
      000242 74rA9            [12] 1043 	mov	a,#___str_6
      000244 C0 E0            [24] 1044 	push	acc
      000246 74s00            [12] 1045 	mov	a,#(___str_6 >> 8)
      000248 C0 E0            [24] 1046 	push	acc
      00024A 12r00r00         [24] 1047 	lcall	_printf_tiny
      00024D 15 81            [12] 1048 	dec	sp
      00024F 15 81            [12] 1049 	dec	sp
                                   1050 ;	main.c:150: printf_tiny("\n\rPress S to print desired string on LCD\n\r");
      000251 74rD7            [12] 1051 	mov	a,#___str_7
      000253 C0 E0            [24] 1052 	push	acc
      000255 74s00            [12] 1053 	mov	a,#(___str_7 >> 8)
      000257 C0 E0            [24] 1054 	push	acc
      000259 12r00r00         [24] 1055 	lcall	_printf_tiny
      00025C 15 81            [12] 1056 	dec	sp
      00025E 15 81            [12] 1057 	dec	sp
                                   1058 ;	main.c:151: printf_tiny("\n\rPress B to clear LCD\n\r");
      000260 74r02            [12] 1059 	mov	a,#___str_8
      000262 C0 E0            [24] 1060 	push	acc
      000264 74s01            [12] 1061 	mov	a,#(___str_8 >> 8)
      000266 C0 E0            [24] 1062 	push	acc
      000268 12r00r00         [24] 1063 	lcall	_printf_tiny
      00026B 15 81            [12] 1064 	dec	sp
      00026D 15 81            [12] 1065 	dec	sp
                                   1066 ;	main.c:152: printf_tiny("\n\rPress E to stop the elapsed time clock\n\r");
      00026F 74r1B            [12] 1067 	mov	a,#___str_9
      000271 C0 E0            [24] 1068 	push	acc
      000273 74s01            [12] 1069 	mov	a,#(___str_9 >> 8)
      000275 C0 E0            [24] 1070 	push	acc
      000277 12r00r00         [24] 1071 	lcall	_printf_tiny
      00027A 15 81            [12] 1072 	dec	sp
      00027C 15 81            [12] 1073 	dec	sp
                                   1074 ;	main.c:153: printf_tiny("\n\rPress R to restart the clock\n\r");
      00027E 74r46            [12] 1075 	mov	a,#___str_10
      000280 C0 E0            [24] 1076 	push	acc
      000282 74s01            [12] 1077 	mov	a,#(___str_10 >> 8)
      000284 C0 E0            [24] 1078 	push	acc
      000286 12r00r00         [24] 1079 	lcall	_printf_tiny
      000289 15 81            [12] 1080 	dec	sp
      00028B 15 81            [12] 1081 	dec	sp
                                   1082 ;	main.c:154: printf_tiny("\n\rPress Z to reset the clock back to '00:00.0'\n\r");
      00028D 74r67            [12] 1083 	mov	a,#___str_11
      00028F C0 E0            [24] 1084 	push	acc
      000291 74s01            [12] 1085 	mov	a,#(___str_11 >> 8)
      000293 C0 E0            [24] 1086 	push	acc
      000295 12r00r00         [24] 1087 	lcall	_printf_tiny
      000298 15 81            [12] 1088 	dec	sp
      00029A 15 81            [12] 1089 	dec	sp
                                   1090 ;	main.c:155: printf_tiny("\n\rPress G to go to a particular address location'\n\r");
      00029C 74r98            [12] 1091 	mov	a,#___str_12
      00029E C0 E0            [24] 1092 	push	acc
      0002A0 74s01            [12] 1093 	mov	a,#(___str_12 >> 8)
      0002A2 C0 E0            [24] 1094 	push	acc
      0002A4 12r00r00         [24] 1095 	lcall	_printf_tiny
      0002A7 15 81            [12] 1096 	dec	sp
      0002A9 15 81            [12] 1097 	dec	sp
                                   1098 ;	main.c:156: printf_tiny("\n\rPress F to Create a custom character'\n\r");
      0002AB 74rCC            [12] 1099 	mov	a,#___str_13
      0002AD C0 E0            [24] 1100 	push	acc
      0002AF 74s01            [12] 1101 	mov	a,#(___str_13 >> 8)
      0002B1 C0 E0            [24] 1102 	push	acc
      0002B3 12r00r00         [24] 1103 	lcall	_printf_tiny
      0002B6 15 81            [12] 1104 	dec	sp
      0002B8 15 81            [12] 1105 	dec	sp
                                   1106 ;	main.c:157: printf_tiny("\n\rPress D For Hex Dump of DDRAM\n\r");
      0002BA 74rF6            [12] 1107 	mov	a,#___str_14
      0002BC C0 E0            [24] 1108 	push	acc
      0002BE 74s01            [12] 1109 	mov	a,#(___str_14 >> 8)
      0002C0 C0 E0            [24] 1110 	push	acc
      0002C2 12r00r00         [24] 1111 	lcall	_printf_tiny
      0002C5 15 81            [12] 1112 	dec	sp
      0002C7 15 81            [12] 1113 	dec	sp
                                   1114 ;	main.c:158: printf_tiny("\n\rPress I For Hex Dump of CGRAM\n\r");
      0002C9 74r18            [12] 1115 	mov	a,#___str_15
      0002CB C0 E0            [24] 1116 	push	acc
      0002CD 74s02            [12] 1117 	mov	a,#(___str_15 >> 8)
      0002CF C0 E0            [24] 1118 	push	acc
      0002D1 12r00r00         [24] 1119 	lcall	_printf_tiny
      0002D4 15 81            [12] 1120 	dec	sp
      0002D6 15 81            [12] 1121 	dec	sp
                                   1122 ;	main.c:159: printf_tiny("\n\r**************************************************\n\r");
      0002D8 74r3A            [12] 1123 	mov	a,#___str_16
      0002DA C0 E0            [24] 1124 	push	acc
      0002DC 74s02            [12] 1125 	mov	a,#(___str_16 >> 8)
      0002DE C0 E0            [24] 1126 	push	acc
      0002E0 12r00r00         [24] 1127 	lcall	_printf_tiny
      0002E3 15 81            [12] 1128 	dec	sp
      0002E5 15 81            [12] 1129 	dec	sp
      0002E7 D0 07            [24] 1130 	pop	ar7
      0002E9 EF               [12] 1131 	mov	a,r7
      0002EA 13               [12] 1132 	rrc	a
      0002EB 92 AF            [24] 1133 	mov	ea,c
                                   1134 ;	main.c:161: break;
      0002ED 02r01r91         [24] 1135 	ljmp	00150$
                                   1136 ;	main.c:162: case 'J':
      0002F0                       1137 00102$:
                                   1138 ;	main.c:164: printf_tiny("Enter row: \n\r");
      0002F0 74r71            [12] 1139 	mov	a,#___str_17
      0002F2 C0 E0            [24] 1140 	push	acc
      0002F4 74s02            [12] 1141 	mov	a,#(___str_17 >> 8)
      0002F6 C0 E0            [24] 1142 	push	acc
      0002F8 12r00r00         [24] 1143 	lcall	_printf_tiny
      0002FB 15 81            [12] 1144 	dec	sp
      0002FD 15 81            [12] 1145 	dec	sp
                                   1146 ;	main.c:165: uint16_t row=getchar();
      0002FF 12r00r00         [24] 1147 	lcall	_getchar
                                   1148 ;	main.c:167: putchar(row);
      000302 AE 82            [24] 1149 	mov	r6,dpl
      000304 AF 83            [24] 1150 	mov  r7,dph
      000306 C0 07            [24] 1151 	push	ar7
      000308 C0 06            [24] 1152 	push	ar6
      00030A 12r00r00         [24] 1153 	lcall	_putchar
                                   1154 ;	main.c:168: printf_tiny("Enter column: \n\r");
      00030D 74r7F            [12] 1155 	mov	a,#___str_18
      00030F C0 E0            [24] 1156 	push	acc
      000311 74s02            [12] 1157 	mov	a,#(___str_18 >> 8)
      000313 C0 E0            [24] 1158 	push	acc
      000315 12r00r00         [24] 1159 	lcall	_printf_tiny
      000318 15 81            [12] 1160 	dec	sp
      00031A 15 81            [12] 1161 	dec	sp
                                   1162 ;	main.c:169: uint16_t column=getchar();
      00031C 12r00r00         [24] 1163 	lcall	_getchar
                                   1164 ;	main.c:171: putchar(column);
      00031F AC 82            [24] 1165 	mov	r4,dpl
      000321 AD 83            [24] 1166 	mov  r5,dph
      000323 C0 05            [24] 1167 	push	ar5
      000325 C0 04            [24] 1168 	push	ar4
      000327 12r00r00         [24] 1169 	lcall	_putchar
      00032A D0 04            [24] 1170 	pop	ar4
      00032C D0 05            [24] 1171 	pop	ar5
      00032E D0 06            [24] 1172 	pop	ar6
      000330 D0 07            [24] 1173 	pop	ar7
                                   1174 ;	main.c:173: if (((row >= '0') && (row <= '3')) && ((column >= '0') && (column <= '9')))
      000332 8E 02            [24] 1175 	mov	ar2,r6
      000334 8F 03            [24] 1176 	mov	ar3,r7
      000336 C3               [12] 1177 	clr	c
      000337 EA               [12] 1178 	mov	a,r2
      000338 94 30            [12] 1179 	subb	a,#0x30
      00033A EB               [12] 1180 	mov	a,r3
      00033B 94 00            [12] 1181 	subb	a,#0x00
      00033D 40 47            [24] 1182 	jc	00110$
      00033F 8E 02            [24] 1183 	mov	ar2,r6
      000341 8F 03            [24] 1184 	mov	ar3,r7
      000343 C3               [12] 1185 	clr	c
      000344 74 33            [12] 1186 	mov	a,#0x33
      000346 9A               [12] 1187 	subb	a,r2
      000347 E4               [12] 1188 	clr	a
      000348 9B               [12] 1189 	subb	a,r3
      000349 40 3B            [24] 1190 	jc	00110$
      00034B 8C 02            [24] 1191 	mov	ar2,r4
      00034D 8D 03            [24] 1192 	mov	ar3,r5
      00034F C3               [12] 1193 	clr	c
      000350 EA               [12] 1194 	mov	a,r2
      000351 94 30            [12] 1195 	subb	a,#0x30
      000353 EB               [12] 1196 	mov	a,r3
      000354 94 00            [12] 1197 	subb	a,#0x00
      000356 40 2E            [24] 1198 	jc	00110$
      000358 8C 02            [24] 1199 	mov	ar2,r4
      00035A 8D 03            [24] 1200 	mov	ar3,r5
      00035C C3               [12] 1201 	clr	c
      00035D 74 39            [12] 1202 	mov	a,#0x39
      00035F 9A               [12] 1203 	subb	a,r2
      000360 E4               [12] 1204 	clr	a
      000361 9B               [12] 1205 	subb	a,r3
      000362 40 22            [24] 1206 	jc	00110$
                                   1207 ;	main.c:176: lcdgotoxy(row-'0',column-'0');
      000364 EE               [12] 1208 	mov	a,r6
      000365 24 D0            [12] 1209 	add	a,#0xd0
      000367 FA               [12] 1210 	mov	r2,a
      000368 EF               [12] 1211 	mov	a,r7
      000369 34 FF            [12] 1212 	addc	a,#0xff
      00036B FB               [12] 1213 	mov	r3,a
      00036C EC               [12] 1214 	mov	a,r4
      00036D 24 D0            [12] 1215 	add	a,#0xd0
      00036F F8               [12] 1216 	mov	r0,a
      000370 ED               [12] 1217 	mov	a,r5
      000371 34 FF            [12] 1218 	addc	a,#0xff
      000373 F9               [12] 1219 	mov	r1,a
      000374 90r00r00         [24] 1220 	mov	dptr,#_lcdgotoxy_PARM_2
      000377 E8               [12] 1221 	mov	a,r0
      000378 F0               [24] 1222 	movx	@dptr,a
      000379 E9               [12] 1223 	mov	a,r1
      00037A A3               [24] 1224 	inc	dptr
      00037B F0               [24] 1225 	movx	@dptr,a
      00037C 8A 82            [24] 1226 	mov	dpl,r2
      00037E 8B 83            [24] 1227 	mov	dph,r3
      000380 12r00r00         [24] 1228 	lcall	_lcdgotoxy
      000383 02r01r91         [24] 1229 	ljmp	00150$
      000386                       1230 00110$:
                                   1231 ;	main.c:179: else if (((row >= '0') && (row <= '3')) && ((column >= 'A') && (column <= 'F')))
      000386 8E 02            [24] 1232 	mov	ar2,r6
      000388 8F 03            [24] 1233 	mov	ar3,r7
      00038A C3               [12] 1234 	clr	c
      00038B EA               [12] 1235 	mov	a,r2
      00038C 94 30            [12] 1236 	subb	a,#0x30
      00038E EB               [12] 1237 	mov	a,r3
      00038F 94 00            [12] 1238 	subb	a,#0x00
      000391 40 47            [24] 1239 	jc	00104$
      000393 8E 02            [24] 1240 	mov	ar2,r6
      000395 8F 03            [24] 1241 	mov	ar3,r7
      000397 C3               [12] 1242 	clr	c
      000398 74 33            [12] 1243 	mov	a,#0x33
      00039A 9A               [12] 1244 	subb	a,r2
      00039B E4               [12] 1245 	clr	a
      00039C 9B               [12] 1246 	subb	a,r3
      00039D 40 3B            [24] 1247 	jc	00104$
      00039F 8C 02            [24] 1248 	mov	ar2,r4
      0003A1 8D 03            [24] 1249 	mov	ar3,r5
      0003A3 C3               [12] 1250 	clr	c
      0003A4 EA               [12] 1251 	mov	a,r2
      0003A5 94 41            [12] 1252 	subb	a,#0x41
      0003A7 EB               [12] 1253 	mov	a,r3
      0003A8 94 00            [12] 1254 	subb	a,#0x00
      0003AA 40 2E            [24] 1255 	jc	00104$
      0003AC 8C 02            [24] 1256 	mov	ar2,r4
      0003AE 8D 03            [24] 1257 	mov	ar3,r5
      0003B0 C3               [12] 1258 	clr	c
      0003B1 74 46            [12] 1259 	mov	a,#0x46
      0003B3 9A               [12] 1260 	subb	a,r2
      0003B4 E4               [12] 1261 	clr	a
      0003B5 9B               [12] 1262 	subb	a,r3
      0003B6 40 22            [24] 1263 	jc	00104$
                                   1264 ;	main.c:182: lcdgotoxy(row-'0',column-55);
      0003B8 EE               [12] 1265 	mov	a,r6
      0003B9 24 D0            [12] 1266 	add	a,#0xd0
      0003BB FE               [12] 1267 	mov	r6,a
      0003BC EF               [12] 1268 	mov	a,r7
      0003BD 34 FF            [12] 1269 	addc	a,#0xff
      0003BF FF               [12] 1270 	mov	r7,a
      0003C0 EC               [12] 1271 	mov	a,r4
      0003C1 24 C9            [12] 1272 	add	a,#0xc9
      0003C3 FC               [12] 1273 	mov	r4,a
      0003C4 ED               [12] 1274 	mov	a,r5
      0003C5 34 FF            [12] 1275 	addc	a,#0xff
      0003C7 FD               [12] 1276 	mov	r5,a
      0003C8 90r00r00         [24] 1277 	mov	dptr,#_lcdgotoxy_PARM_2
      0003CB EC               [12] 1278 	mov	a,r4
      0003CC F0               [24] 1279 	movx	@dptr,a
      0003CD ED               [12] 1280 	mov	a,r5
      0003CE A3               [24] 1281 	inc	dptr
      0003CF F0               [24] 1282 	movx	@dptr,a
      0003D0 8E 82            [24] 1283 	mov	dpl,r6
      0003D2 8F 83            [24] 1284 	mov	dph,r7
      0003D4 12r00r00         [24] 1285 	lcall	_lcdgotoxy
      0003D7 02r01r91         [24] 1286 	ljmp	00150$
      0003DA                       1287 00104$:
                                   1288 ;	main.c:187: printf_tiny("Enter a valid input with row 0-3 and column 0-F\n\r");
      0003DA 74r90            [12] 1289 	mov	a,#___str_19
      0003DC C0 E0            [24] 1290 	push	acc
      0003DE 74s02            [12] 1291 	mov	a,#(___str_19 >> 8)
      0003E0 C0 E0            [24] 1292 	push	acc
      0003E2 12r00r00         [24] 1293 	lcall	_printf_tiny
      0003E5 15 81            [12] 1294 	dec	sp
      0003E7 15 81            [12] 1295 	dec	sp
                                   1296 ;	main.c:189: break;
      0003E9 02r01r91         [24] 1297 	ljmp	00150$
                                   1298 ;	main.c:190: case 'C':
      0003EC                       1299 00115$:
                                   1300 ;	main.c:192: printf_tiny("Enter character to print on LCD: \n\r");
      0003EC 74rC2            [12] 1301 	mov	a,#___str_20
      0003EE C0 E0            [24] 1302 	push	acc
      0003F0 74s02            [12] 1303 	mov	a,#(___str_20 >> 8)
      0003F2 C0 E0            [24] 1304 	push	acc
      0003F4 12r00r00         [24] 1305 	lcall	_printf_tiny
      0003F7 15 81            [12] 1306 	dec	sp
      0003F9 15 81            [12] 1307 	dec	sp
                                   1308 ;	main.c:193: uint8_t lcd_input=getchar();
      0003FB 12r00r00         [24] 1309 	lcall	_getchar
      0003FE AE 82            [24] 1310 	mov	r6,dpl
                                   1311 ;	main.c:195: printf_tiny("%c\n\r",lcd_input);
      000400 8E 05            [24] 1312 	mov	ar5,r6
      000402 7F 00            [12] 1313 	mov	r7,#0x00
      000404 C0 06            [24] 1314 	push	ar6
      000406 C0 05            [24] 1315 	push	ar5
      000408 C0 07            [24] 1316 	push	ar7
      00040A 74r55            [12] 1317 	mov	a,#___str_3
      00040C C0 E0            [24] 1318 	push	acc
      00040E 74s00            [12] 1319 	mov	a,#(___str_3 >> 8)
      000410 C0 E0            [24] 1320 	push	acc
      000412 12r00r00         [24] 1321 	lcall	_printf_tiny
      000415 E5 81            [12] 1322 	mov	a,sp
      000417 24 FC            [12] 1323 	add	a,#0xfc
      000419 F5 81            [12] 1324 	mov	sp,a
      00041B D0 06            [24] 1325 	pop	ar6
                                   1326 ;	main.c:199: }
      00041D 7F 01            [12] 1327 	mov	r7,#0x01
      00041F 10 AF 02         [24] 1328 	jbc	ea,00332$
      000422 7F 00            [12] 1329 	mov	r7,#0x00
      000424                       1330 00332$:
                                   1331 ;	main.c:198: lcdputch(lcd_input);
      000424 8E 82            [24] 1332 	mov	dpl,r6
      000426 C0 07            [24] 1333 	push	ar7
      000428 12r00r00         [24] 1334 	lcall	_lcdputch
      00042B D0 07            [24] 1335 	pop	ar7
      00042D EF               [12] 1336 	mov	a,r7
      00042E 13               [12] 1337 	rrc	a
      00042F 92 AF            [24] 1338 	mov	ea,c
                                   1339 ;	main.c:200: break;
      000431 02r01r91         [24] 1340 	ljmp	00150$
                                   1341 ;	main.c:201: case 'S':
      000434                       1342 00116$:
                                   1343 ;	main.c:203: printf_tiny("Enter string to print on LCD: \n\r");
      000434 74rE6            [12] 1344 	mov	a,#___str_21
      000436 C0 E0            [24] 1345 	push	acc
      000438 74s02            [12] 1346 	mov	a,#(___str_21 >> 8)
      00043A C0 E0            [24] 1347 	push	acc
      00043C 12r00r00         [24] 1348 	lcall	_printf_tiny
      00043F 15 81            [12] 1349 	dec	sp
      000441 15 81            [12] 1350 	dec	sp
                                   1351 ;	main.c:205: int eol_check=1;
      000443 90r00r16         [24] 1352 	mov	dptr,#_main_eol_check_196615_104
      000446 74 01            [12] 1353 	mov	a,#0x01
      000448 F0               [24] 1354 	movx	@dptr,a
      000449 E4               [12] 1355 	clr	a
      00044A A3               [24] 1356 	inc	dptr
      00044B F0               [24] 1357 	movx	@dptr,a
                                   1358 ;	main.c:208: while(eol_check)
      00044C 7E 00            [12] 1359 	mov	r6,#0x00
      00044E 7F 00            [12] 1360 	mov	r7,#0x00
      000450                       1361 00120$:
      000450 90r00r16         [24] 1362 	mov	dptr,#_main_eol_check_196615_104
      000453 E0               [24] 1363 	movx	a,@dptr
      000454 F5 F0            [12] 1364 	mov	b,a
      000456 A3               [24] 1365 	inc	dptr
      000457 E0               [24] 1366 	movx	a,@dptr
      000458 45 F0            [12] 1367 	orl	a,b
      00045A 60 4F            [24] 1368 	jz	00122$
                                   1369 ;	main.c:210: uint8_t ch=getchar();
      00045C C0 07            [24] 1370 	push	ar7
      00045E C0 06            [24] 1371 	push	ar6
      000460 12r00r00         [24] 1372 	lcall	_getchar
      000463 AC 82            [24] 1373 	mov	r4,dpl
                                   1374 ;	main.c:212: printf_tiny("%c",ch);
      000465 8C 03            [24] 1375 	mov	ar3,r4
      000467 7D 00            [12] 1376 	mov	r5,#0x00
      000469 C0 04            [24] 1377 	push	ar4
      00046B C0 03            [24] 1378 	push	ar3
      00046D C0 05            [24] 1379 	push	ar5
      00046F 74r07            [12] 1380 	mov	a,#___str_22
      000471 C0 E0            [24] 1381 	push	acc
      000473 74s03            [12] 1382 	mov	a,#(___str_22 >> 8)
      000475 C0 E0            [24] 1383 	push	acc
      000477 12r00r00         [24] 1384 	lcall	_printf_tiny
      00047A E5 81            [12] 1385 	mov	a,sp
      00047C 24 FC            [12] 1386 	add	a,#0xfc
      00047E F5 81            [12] 1387 	mov	sp,a
      000480 D0 04            [24] 1388 	pop	ar4
      000482 D0 06            [24] 1389 	pop	ar6
      000484 D0 07            [24] 1390 	pop	ar7
                                   1391 ;	main.c:214: if(ch==0xD)
      000486 BC 0D 09         [24] 1392 	cjne	r4,#0x0d,00118$
                                   1393 ;	main.c:215: eol_check=0;
      000489 90r00r16         [24] 1394 	mov	dptr,#_main_eol_check_196615_104
      00048C E4               [12] 1395 	clr	a
      00048D F0               [24] 1396 	movx	@dptr,a
      00048E A3               [24] 1397 	inc	dptr
      00048F F0               [24] 1398 	movx	@dptr,a
      000490 80 BE            [24] 1399 	sjmp	00120$
      000492                       1400 00118$:
                                   1401 ;	main.c:219: *(string+i)=ch;
      000492 8E 02            [24] 1402 	mov	ar2,r6
      000494 EF               [12] 1403 	mov	a,r7
      000495 FB               [12] 1404 	mov	r3,a
      000496 33               [12] 1405 	rlc	a
      000497 95 E0            [12] 1406 	subb	a,acc
      000499 FD               [12] 1407 	mov	r5,a
      00049A 8A 82            [24] 1408 	mov	dpl,r2
      00049C 8B 83            [24] 1409 	mov	dph,r3
      00049E 8D F0            [24] 1410 	mov	b,r5
      0004A0 EC               [12] 1411 	mov	a,r4
      0004A1 12r00r00         [24] 1412 	lcall	__gptrput
                                   1413 ;	main.c:220: i++;
      0004A4 0E               [12] 1414 	inc	r6
      0004A5 BE 00 A8         [24] 1415 	cjne	r6,#0x00,00120$
      0004A8 0F               [12] 1416 	inc	r7
      0004A9 80 A5            [24] 1417 	sjmp	00120$
      0004AB                       1418 00122$:
                                   1419 ;	main.c:224: *(string+i)='\0';
      0004AB EF               [12] 1420 	mov	a,r7
      0004AC 33               [12] 1421 	rlc	a
      0004AD 95 E0            [12] 1422 	subb	a,acc
      0004AF FD               [12] 1423 	mov	r5,a
      0004B0 8E 82            [24] 1424 	mov	dpl,r6
      0004B2 8F 83            [24] 1425 	mov	dph,r7
      0004B4 8D F0            [24] 1426 	mov	b,r5
      0004B6 E4               [12] 1427 	clr	a
      0004B7 12r00r00         [24] 1428 	lcall	__gptrput
                                   1429 ;	main.c:228: }
      0004BA 7F 01            [12] 1430 	mov	r7,#0x01
      0004BC 10 AF 02         [24] 1431 	jbc	ea,00337$
      0004BF 7F 00            [12] 1432 	mov	r7,#0x00
      0004C1                       1433 00337$:
                                   1434 ;	main.c:227: lcdputstr(string);
      0004C1 90 00 00         [24] 1435 	mov	dptr,#0x0000
      0004C4 75 F0 00         [24] 1436 	mov	b,#0x00
      0004C7 C0 07            [24] 1437 	push	ar7
      0004C9 12r00r00         [24] 1438 	lcall	_lcdputstr
      0004CC D0 07            [24] 1439 	pop	ar7
      0004CE EF               [12] 1440 	mov	a,r7
      0004CF 13               [12] 1441 	rrc	a
      0004D0 92 AF            [24] 1442 	mov	ea,c
                                   1443 ;	main.c:229: break;
      0004D2 02r01r91         [24] 1444 	ljmp	00150$
                                   1445 ;	main.c:230: case 'B':
      0004D5                       1446 00123$:
                                   1447 ;	main.c:235: }
      0004D5 7F 01            [12] 1448 	mov	r7,#0x01
      0004D7 10 AF 02         [24] 1449 	jbc	ea,00338$
      0004DA 7F 00            [12] 1450 	mov	r7,#0x00
      0004DC                       1451 00338$:
                                   1452 ;	main.c:234: lcdclear();
      0004DC C0 07            [24] 1453 	push	ar7
      0004DE 12r00r00         [24] 1454 	lcall	_lcdclear
      0004E1 D0 07            [24] 1455 	pop	ar7
      0004E3 EF               [12] 1456 	mov	a,r7
      0004E4 13               [12] 1457 	rrc	a
      0004E5 92 AF            [24] 1458 	mov	ea,c
                                   1459 ;	main.c:236: break;
      0004E7 02r01r91         [24] 1460 	ljmp	00150$
                                   1461 ;	main.c:237: case 'Z':
      0004EA                       1462 00124$:
                                   1463 ;	main.c:261: }
      0004EA 7F 01            [12] 1464 	mov	r7,#0x01
      0004EC 10 AF 02         [24] 1465 	jbc	ea,00339$
      0004EF 7F 00            [12] 1466 	mov	r7,#0x00
      0004F1                       1467 00339$:
                                   1468 ;	main.c:241: msec = 0;
      0004F1 90r00r02         [24] 1469 	mov	dptr,#_msec
      0004F4 E4               [12] 1470 	clr	a
      0004F5 F0               [24] 1471 	movx	@dptr,a
                                   1472 ;	main.c:242: secz = 0;
      0004F6 90r00r03         [24] 1473 	mov	dptr,#_secz
      0004F9 F0               [24] 1474 	movx	@dptr,a
                                   1475 ;	main.c:243: seco = 0;
      0004FA 90r00r04         [24] 1476 	mov	dptr,#_seco
      0004FD F0               [24] 1477 	movx	@dptr,a
                                   1478 ;	main.c:244: minz = 0;
      0004FE 90r00r05         [24] 1479 	mov	dptr,#_minz
      000501 F0               [24] 1480 	movx	@dptr,a
                                   1481 ;	main.c:245: mino = 0;
      000502 90r00r06         [24] 1482 	mov	dptr,#_mino
      000505 F0               [24] 1483 	movx	@dptr,a
                                   1484 ;	main.c:247: lcdgotoaddr(0x59);
      000506 75 82 59         [24] 1485 	mov	dpl,#0x59
      000509 C0 07            [24] 1486 	push	ar7
      00050B 12r00r00         [24] 1487 	lcall	_lcdgotoaddr
                                   1488 ;	main.c:248: lcdputch((char)mino+ '0');
      00050E 90r00r06         [24] 1489 	mov	dptr,#_mino
      000511 E0               [24] 1490 	movx	a,@dptr
      000512 24 30            [12] 1491 	add	a,#0x30
      000514 F5 82            [12] 1492 	mov	dpl,a
      000516 12r00r00         [24] 1493 	lcall	_lcdputch
                                   1494 ;	main.c:249: lcdgotoaddr(0x5A);
      000519 75 82 5A         [24] 1495 	mov	dpl,#0x5a
      00051C 12r00r00         [24] 1496 	lcall	_lcdgotoaddr
                                   1497 ;	main.c:250: lcdputch((char)minz+ '0');
      00051F 90r00r05         [24] 1498 	mov	dptr,#_minz
      000522 E0               [24] 1499 	movx	a,@dptr
      000523 24 30            [12] 1500 	add	a,#0x30
      000525 F5 82            [12] 1501 	mov	dpl,a
      000527 12r00r00         [24] 1502 	lcall	_lcdputch
                                   1503 ;	main.c:251: lcdgotoaddr(0x5B);
      00052A 75 82 5B         [24] 1504 	mov	dpl,#0x5b
      00052D 12r00r00         [24] 1505 	lcall	_lcdgotoaddr
                                   1506 ;	main.c:252: lcdputch((char)58);
      000530 75 82 3A         [24] 1507 	mov	dpl,#0x3a
      000533 12r00r00         [24] 1508 	lcall	_lcdputch
                                   1509 ;	main.c:253: lcdgotoaddr(0x5C);
      000536 75 82 5C         [24] 1510 	mov	dpl,#0x5c
      000539 12r00r00         [24] 1511 	lcall	_lcdgotoaddr
                                   1512 ;	main.c:254: lcdputch((char)seco+ '0');
      00053C 90r00r04         [24] 1513 	mov	dptr,#_seco
      00053F E0               [24] 1514 	movx	a,@dptr
      000540 24 30            [12] 1515 	add	a,#0x30
      000542 F5 82            [12] 1516 	mov	dpl,a
      000544 12r00r00         [24] 1517 	lcall	_lcdputch
                                   1518 ;	main.c:255: lcdgotoaddr(0x5D);
      000547 75 82 5D         [24] 1519 	mov	dpl,#0x5d
      00054A 12r00r00         [24] 1520 	lcall	_lcdgotoaddr
                                   1521 ;	main.c:256: lcdputch((char)secz+ '0');
      00054D 90r00r03         [24] 1522 	mov	dptr,#_secz
      000550 E0               [24] 1523 	movx	a,@dptr
      000551 24 30            [12] 1524 	add	a,#0x30
      000553 F5 82            [12] 1525 	mov	dpl,a
      000555 12r00r00         [24] 1526 	lcall	_lcdputch
                                   1527 ;	main.c:257: lcdgotoaddr(0x5E);
      000558 75 82 5E         [24] 1528 	mov	dpl,#0x5e
      00055B 12r00r00         [24] 1529 	lcall	_lcdgotoaddr
                                   1530 ;	main.c:258: lcdputch((char)46);
      00055E 75 82 2E         [24] 1531 	mov	dpl,#0x2e
      000561 12r00r00         [24] 1532 	lcall	_lcdputch
                                   1533 ;	main.c:259: lcdgotoaddr(0x5F);
      000564 75 82 5F         [24] 1534 	mov	dpl,#0x5f
      000567 12r00r00         [24] 1535 	lcall	_lcdgotoaddr
                                   1536 ;	main.c:260: lcdputch((char)msec+ '0');
      00056A 90r00r02         [24] 1537 	mov	dptr,#_msec
      00056D E0               [24] 1538 	movx	a,@dptr
      00056E 24 30            [12] 1539 	add	a,#0x30
      000570 F5 82            [12] 1540 	mov	dpl,a
      000572 12r00r00         [24] 1541 	lcall	_lcdputch
      000575 D0 07            [24] 1542 	pop	ar7
      000577 EF               [12] 1543 	mov	a,r7
      000578 13               [12] 1544 	rrc	a
      000579 92 AF            [24] 1545 	mov	ea,c
                                   1546 ;	main.c:262: break;
      00057B 02r01r91         [24] 1547 	ljmp	00150$
                                   1548 ;	main.c:263: case 'E':
      00057E                       1549 00125$:
                                   1550 ;	main.c:265: TCON &= ~(0x10);
      00057E 53 88 EF         [24] 1551 	anl	_TCON,#0xef
                                   1552 ;	main.c:266: break;
      000581 02r01r91         [24] 1553 	ljmp	00150$
                                   1554 ;	main.c:267: case 'R':
      000584                       1555 00126$:
                                   1556 ;	main.c:269: TCON |= 0x10;
      000584 43 88 10         [24] 1557 	orl	_TCON,#0x10
                                   1558 ;	main.c:270: break;
      000587 02r01r91         [24] 1559 	ljmp	00150$
                                   1560 ;	main.c:271: case 'G':
      00058A                       1561 00127$:
                                   1562 ;	main.c:273: printf_tiny("Enter go to address: \n\r");
      00058A 74r0A            [12] 1563 	mov	a,#___str_23
      00058C C0 E0            [24] 1564 	push	acc
      00058E 74s03            [12] 1565 	mov	a,#(___str_23 >> 8)
      000590 C0 E0            [24] 1566 	push	acc
      000592 12r00r00         [24] 1567 	lcall	_printf_tiny
      000595 15 81            [12] 1568 	dec	sp
      000597 15 81            [12] 1569 	dec	sp
                                   1570 ;	main.c:276: uint16_t x=getchar();
      000599 12r00r00         [24] 1571 	lcall	_getchar
      00059C AE 82            [24] 1572 	mov	r6,dpl
      00059E AF 83            [24] 1573 	mov	r7,dph
      0005A0 90r00r18         [24] 1574 	mov	dptr,#_main_x_196616_110
      0005A3 EE               [12] 1575 	mov	a,r6
      0005A4 F0               [24] 1576 	movx	@dptr,a
      0005A5 EF               [12] 1577 	mov	a,r7
      0005A6 A3               [24] 1578 	inc	dptr
      0005A7 F0               [24] 1579 	movx	@dptr,a
                                   1580 ;	main.c:277: putchar(x);
      0005A8 8E 82            [24] 1581 	mov	dpl,r6
      0005AA 8F 83            [24] 1582 	mov	dph,r7
      0005AC C0 07            [24] 1583 	push	ar7
      0005AE C0 06            [24] 1584 	push	ar6
      0005B0 12r00r00         [24] 1585 	lcall	_putchar
                                   1586 ;	main.c:279: uint16_t y=getchar();
      0005B3 12r00r00         [24] 1587 	lcall	_getchar
      0005B6 AC 82            [24] 1588 	mov	r4,dpl
      0005B8 AD 83            [24] 1589 	mov	r5,dph
      0005BA 90r00r1A         [24] 1590 	mov	dptr,#_main_y_196617_111
      0005BD EC               [12] 1591 	mov	a,r4
      0005BE F0               [24] 1592 	movx	@dptr,a
      0005BF ED               [12] 1593 	mov	a,r5
      0005C0 A3               [24] 1594 	inc	dptr
      0005C1 F0               [24] 1595 	movx	@dptr,a
                                   1596 ;	main.c:280: putchar(y);
      0005C2 8C 82            [24] 1597 	mov	dpl,r4
      0005C4 8D 83            [24] 1598 	mov	dph,r5
      0005C6 C0 05            [24] 1599 	push	ar5
      0005C8 C0 04            [24] 1600 	push	ar4
      0005CA 12r00r00         [24] 1601 	lcall	_putchar
      0005CD D0 04            [24] 1602 	pop	ar4
      0005CF D0 05            [24] 1603 	pop	ar5
      0005D1 D0 06            [24] 1604 	pop	ar6
      0005D3 D0 07            [24] 1605 	pop	ar7
                                   1606 ;	main.c:282: if (((x >= '0') && (x <= '5')) && ((y >= '0') && (y <= '9')))
      0005D5 8E 02            [24] 1607 	mov	ar2,r6
      0005D7 8F 03            [24] 1608 	mov	ar3,r7
      0005D9 C3               [12] 1609 	clr	c
      0005DA EA               [12] 1610 	mov	a,r2
      0005DB 94 30            [12] 1611 	subb	a,#0x30
      0005DD EB               [12] 1612 	mov	a,r3
      0005DE 94 00            [12] 1613 	subb	a,#0x00
      0005E0 40 3A            [24] 1614 	jc	00135$
      0005E2 8E 02            [24] 1615 	mov	ar2,r6
      0005E4 8F 03            [24] 1616 	mov	ar3,r7
      0005E6 C3               [12] 1617 	clr	c
      0005E7 74 35            [12] 1618 	mov	a,#0x35
      0005E9 9A               [12] 1619 	subb	a,r2
      0005EA E4               [12] 1620 	clr	a
      0005EB 9B               [12] 1621 	subb	a,r3
      0005EC 40 2E            [24] 1622 	jc	00135$
      0005EE 8C 02            [24] 1623 	mov	ar2,r4
      0005F0 8D 03            [24] 1624 	mov	ar3,r5
      0005F2 C3               [12] 1625 	clr	c
      0005F3 EA               [12] 1626 	mov	a,r2
      0005F4 94 30            [12] 1627 	subb	a,#0x30
      0005F6 EB               [12] 1628 	mov	a,r3
      0005F7 94 00            [12] 1629 	subb	a,#0x00
      0005F9 40 21            [24] 1630 	jc	00135$
      0005FB 8C 02            [24] 1631 	mov	ar2,r4
      0005FD 8D 03            [24] 1632 	mov	ar3,r5
      0005FF C3               [12] 1633 	clr	c
      000600 74 39            [12] 1634 	mov	a,#0x39
      000602 9A               [12] 1635 	subb	a,r2
      000603 E4               [12] 1636 	clr	a
      000604 9B               [12] 1637 	subb	a,r3
      000605 40 15            [24] 1638 	jc	00135$
                                   1639 ;	main.c:287: x = x-'0';
      000607 EE               [12] 1640 	mov	a,r6
      000608 24 D0            [12] 1641 	add	a,#0xd0
      00060A FE               [12] 1642 	mov	r6,a
                                   1643 ;	main.c:288: y = y-'0';
      00060B EC               [12] 1644 	mov	a,r4
      00060C 24 D0            [12] 1645 	add	a,#0xd0
      00060E FC               [12] 1646 	mov	r4,a
                                   1647 ;	main.c:290: sum = x*16 + y;
      00060F EE               [12] 1648 	mov	a,r6
      000610 C4               [12] 1649 	swap	a
      000611 54 F0            [12] 1650 	anl	a,#0xf0
      000613 2C               [12] 1651 	add	a,r4
                                   1652 ;	main.c:292: lcdgotoaddr(sum);
      000614 F5 82            [12] 1653 	mov	dpl,a
      000616 12r00r00         [24] 1654 	lcall	_lcdgotoaddr
      000619 02r01r91         [24] 1655 	ljmp	00150$
      00061C                       1656 00135$:
                                   1657 ;	main.c:295: else if (((x >= '0') && (x <= '5')) && ((y >= 'A') && (y <= 'F')))
      00061C 90r00r18         [24] 1658 	mov	dptr,#_main_x_196616_110
      00061F E0               [24] 1659 	movx	a,@dptr
      000620 FE               [12] 1660 	mov	r6,a
      000621 A3               [24] 1661 	inc	dptr
      000622 E0               [24] 1662 	movx	a,@dptr
      000623 FF               [12] 1663 	mov	r7,a
      000624 C3               [12] 1664 	clr	c
      000625 EE               [12] 1665 	mov	a,r6
      000626 94 30            [12] 1666 	subb	a,#0x30
      000628 EF               [12] 1667 	mov	a,r7
      000629 94 00            [12] 1668 	subb	a,#0x00
      00062B 40 5C            [24] 1669 	jc	00129$
      00062D 74 35            [12] 1670 	mov	a,#0x35
      00062F 9E               [12] 1671 	subb	a,r6
      000630 E4               [12] 1672 	clr	a
      000631 9F               [12] 1673 	subb	a,r7
      000632 40 55            [24] 1674 	jc	00129$
      000634 90r00r1A         [24] 1675 	mov	dptr,#_main_y_196617_111
      000637 E0               [24] 1676 	movx	a,@dptr
      000638 FC               [12] 1677 	mov	r4,a
      000639 A3               [24] 1678 	inc	dptr
      00063A E0               [24] 1679 	movx	a,@dptr
      00063B FD               [12] 1680 	mov	r5,a
      00063C C3               [12] 1681 	clr	c
      00063D EC               [12] 1682 	mov	a,r4
      00063E 94 41            [12] 1683 	subb	a,#0x41
      000640 ED               [12] 1684 	mov	a,r5
      000641 94 00            [12] 1685 	subb	a,#0x00
      000643 40 44            [24] 1686 	jc	00129$
      000645 74 46            [12] 1687 	mov	a,#0x46
      000647 9C               [12] 1688 	subb	a,r4
      000648 E4               [12] 1689 	clr	a
      000649 9D               [12] 1690 	subb	a,r5
      00064A 40 3D            [24] 1691 	jc	00129$
                                   1692 ;	main.c:300: x = x-'0';
      00064C EE               [12] 1693 	mov	a,r6
      00064D 24 D0            [12] 1694 	add	a,#0xd0
      00064F FE               [12] 1695 	mov	r6,a
      000650 EF               [12] 1696 	mov	a,r7
      000651 34 FF            [12] 1697 	addc	a,#0xff
      000653 FF               [12] 1698 	mov	r7,a
      000654 90r00r18         [24] 1699 	mov	dptr,#_main_x_196616_110
      000657 EE               [12] 1700 	mov	a,r6
      000658 F0               [24] 1701 	movx	@dptr,a
      000659 EF               [12] 1702 	mov	a,r7
      00065A A3               [24] 1703 	inc	dptr
      00065B F0               [24] 1704 	movx	@dptr,a
                                   1705 ;	main.c:301: y = y-55;
      00065C EC               [12] 1706 	mov	a,r4
      00065D 24 C9            [12] 1707 	add	a,#0xc9
      00065F FC               [12] 1708 	mov	r4,a
      000660 ED               [12] 1709 	mov	a,r5
      000661 34 FF            [12] 1710 	addc	a,#0xff
      000663 FD               [12] 1711 	mov	r5,a
      000664 90r00r1A         [24] 1712 	mov	dptr,#_main_y_196617_111
      000667 EC               [12] 1713 	mov	a,r4
      000668 F0               [24] 1714 	movx	@dptr,a
      000669 ED               [12] 1715 	mov	a,r5
      00066A A3               [24] 1716 	inc	dptr
      00066B F0               [24] 1717 	movx	@dptr,a
                                   1718 ;	main.c:303: sum = x*16 + y;
      00066C 90r00r18         [24] 1719 	mov	dptr,#_main_x_196616_110
      00066F E0               [24] 1720 	movx	a,@dptr
      000670 FE               [12] 1721 	mov	r6,a
      000671 A3               [24] 1722 	inc	dptr
      000672 E0               [24] 1723 	movx	a,@dptr
      000673 EE               [12] 1724 	mov	a,r6
      000674 C4               [12] 1725 	swap	a
      000675 54 F0            [12] 1726 	anl	a,#0xf0
      000677 FE               [12] 1727 	mov	r6,a
      000678 90r00r1A         [24] 1728 	mov	dptr,#_main_y_196617_111
      00067B E0               [24] 1729 	movx	a,@dptr
      00067C FD               [12] 1730 	mov	r5,a
      00067D A3               [24] 1731 	inc	dptr
      00067E E0               [24] 1732 	movx	a,@dptr
      00067F ED               [12] 1733 	mov	a,r5
      000680 2E               [12] 1734 	add	a,r6
                                   1735 ;	main.c:305: lcdgotoaddr(sum);
      000681 F5 82            [12] 1736 	mov	dpl,a
      000683 12r00r00         [24] 1737 	lcall	_lcdgotoaddr
      000686 02r01r91         [24] 1738 	ljmp	00150$
      000689                       1739 00129$:
                                   1740 ;	main.c:310: printf_tiny("Enter a valid address 00-1f/ 40-58\n\r");
      000689 74r22            [12] 1741 	mov	a,#___str_24
      00068B C0 E0            [24] 1742 	push	acc
      00068D 74s03            [12] 1743 	mov	a,#(___str_24 >> 8)
      00068F C0 E0            [24] 1744 	push	acc
      000691 12r00r00         [24] 1745 	lcall	_printf_tiny
      000694 15 81            [12] 1746 	dec	sp
      000696 15 81            [12] 1747 	dec	sp
                                   1748 ;	main.c:312: break;
      000698 02r01r91         [24] 1749 	ljmp	00150$
                                   1750 ;	main.c:313: case 'D':
      00069B                       1751 00140$:
                                   1752 ;	main.c:315: hex_dump();
      00069B 12r00r00         [24] 1753 	lcall	_hex_dump
                                   1754 ;	main.c:316: break;
      00069E 02r01r91         [24] 1755 	ljmp	00150$
                                   1756 ;	main.c:317: case 'F':
      0006A1                       1757 00141$:
                                   1758 ;	main.c:318: printf_tiny("Enter custom code\n\r");
      0006A1 74r47            [12] 1759 	mov	a,#___str_25
      0006A3 C0 E0            [24] 1760 	push	acc
      0006A5 74s03            [12] 1761 	mov	a,#(___str_25 >> 8)
      0006A7 C0 E0            [24] 1762 	push	acc
      0006A9 12r00r00         [24] 1763 	lcall	_printf_tiny
      0006AC 15 81            [12] 1764 	dec	sp
      0006AE 15 81            [12] 1765 	dec	sp
                                   1766 ;	main.c:320: char ch_code = getchar();
      0006B0 12r00r00         [24] 1767 	lcall	_getchar
      0006B3 AE 82            [24] 1768 	mov	r6,dpl
                                   1769 ;	main.c:321: putchar(ch_code);
      0006B5 8E 05            [24] 1770 	mov	ar5,r6
      0006B7 7F 00            [12] 1771 	mov	r7,#0x00
      0006B9 8D 82            [24] 1772 	mov	dpl,r5
      0006BB 8F 83            [24] 1773 	mov	dph,r7
      0006BD C0 06            [24] 1774 	push	ar6
      0006BF 12r00r00         [24] 1775 	lcall	_putchar
                                   1776 ;	main.c:322: putchar('\n');
      0006C2 90 00 0A         [24] 1777 	mov	dptr,#0x000a
      0006C5 12r00r00         [24] 1778 	lcall	_putchar
                                   1779 ;	main.c:323: printf_tiny("Enter Row values\n\r");
      0006C8 74r5B            [12] 1780 	mov	a,#___str_26
      0006CA C0 E0            [24] 1781 	push	acc
      0006CC 74s03            [12] 1782 	mov	a,#(___str_26 >> 8)
      0006CE C0 E0            [24] 1783 	push	acc
      0006D0 12r00r00         [24] 1784 	lcall	_printf_tiny
      0006D3 15 81            [12] 1785 	dec	sp
      0006D5 15 81            [12] 1786 	dec	sp
      0006D7 D0 06            [24] 1787 	pop	ar6
                                   1788 ;	main.c:325: for (int j = 0; j<=7; j++)
      0006D9 7D 00            [12] 1789 	mov	r5,#0x00
      0006DB 7F 00            [12] 1790 	mov	r7,#0x00
      0006DD                       1791 00153$:
      0006DD C3               [12] 1792 	clr	c
      0006DE 74 07            [12] 1793 	mov	a,#0x07
      0006E0 9D               [12] 1794 	subb	a,r5
      0006E1 74 80            [12] 1795 	mov	a,#(0x00 ^ 0x80)
      0006E3 8F F0            [24] 1796 	mov	b,r7
      0006E5 63 F0 80         [24] 1797 	xrl	b,#0x80
      0006E8 95 F0            [12] 1798 	subb	a,b
      0006EA 40 72            [24] 1799 	jc	00196$
                                   1800 ;	main.c:327: get_input(input_array);
      0006EC 90r00r03         [24] 1801 	mov	dptr,#_main_input_array_65536_89
      0006EF E0               [24] 1802 	movx	a,@dptr
      0006F0 FA               [12] 1803 	mov	r2,a
      0006F1 A3               [24] 1804 	inc	dptr
      0006F2 E0               [24] 1805 	movx	a,@dptr
      0006F3 FB               [12] 1806 	mov	r3,a
      0006F4 A3               [24] 1807 	inc	dptr
      0006F5 E0               [24] 1808 	movx	a,@dptr
      0006F6 FC               [12] 1809 	mov	r4,a
      0006F7 8A 82            [24] 1810 	mov	dpl,r2
      0006F9 8B 83            [24] 1811 	mov	dph,r3
      0006FB 8C F0            [24] 1812 	mov	b,r4
      0006FD C0 07            [24] 1813 	push	ar7
      0006FF C0 06            [24] 1814 	push	ar6
      000701 C0 05            [24] 1815 	push	ar5
      000703 12r00r00         [24] 1816 	lcall	_get_input
                                   1817 ;	main.c:328: block_size = ascii_to_int(input_array);
      000706 90r00r03         [24] 1818 	mov	dptr,#_main_input_array_65536_89
      000709 E0               [24] 1819 	movx	a,@dptr
      00070A FA               [12] 1820 	mov	r2,a
      00070B A3               [24] 1821 	inc	dptr
      00070C E0               [24] 1822 	movx	a,@dptr
      00070D FB               [12] 1823 	mov	r3,a
      00070E A3               [24] 1824 	inc	dptr
      00070F E0               [24] 1825 	movx	a,@dptr
      000710 FC               [12] 1826 	mov	r4,a
      000711 8A 82            [24] 1827 	mov	dpl,r2
      000713 8B 83            [24] 1828 	mov	dph,r3
      000715 8C F0            [24] 1829 	mov	b,r4
      000717 12r00r00         [24] 1830 	lcall	_ascii_to_int
      00071A AB 82            [24] 1831 	mov	r3,dpl
      00071C AC 83            [24] 1832 	mov	r4,dph
      00071E D0 05            [24] 1833 	pop	ar5
      000720 D0 06            [24] 1834 	pop	ar6
      000722 D0 07            [24] 1835 	pop	ar7
                                   1836 ;	main.c:330: if (block_size >128)
      000724 C3               [12] 1837 	clr	c
      000725 74 80            [12] 1838 	mov	a,#0x80
      000727 9B               [12] 1839 	subb	a,r3
      000728 E4               [12] 1840 	clr	a
      000729 9C               [12] 1841 	subb	a,r4
      00072A 50 15            [24] 1842 	jnc	00143$
                                   1843 ;	main.c:332: printf_tiny("Invalid Row values\n\r");
      00072C C0 06            [24] 1844 	push	ar6
      00072E 74r6E            [12] 1845 	mov	a,#___str_27
      000730 C0 E0            [24] 1846 	push	acc
      000732 74s03            [12] 1847 	mov	a,#(___str_27 >> 8)
      000734 C0 E0            [24] 1848 	push	acc
      000736 12r00r00         [24] 1849 	lcall	_printf_tiny
      000739 15 81            [12] 1850 	dec	sp
      00073B 15 81            [12] 1851 	dec	sp
      00073D D0 06            [24] 1852 	pop	ar6
                                   1853 ;	main.c:333: break;
      00073F 80 1D            [24] 1854 	sjmp	00196$
      000741                       1855 00143$:
                                   1856 ;	main.c:336: arr_input[j] = block_size;
      000741 ED               [12] 1857 	mov	a,r5
      000742 2D               [12] 1858 	add	a,r5
      000743 F9               [12] 1859 	mov	r1,a
      000744 EF               [12] 1860 	mov	a,r7
      000745 33               [12] 1861 	rlc	a
      000746 FA               [12] 1862 	mov	r2,a
      000747 E9               [12] 1863 	mov	a,r1
      000748 24r06            [12] 1864 	add	a,#_main_arr_input_65536_89
      00074A F5 82            [12] 1865 	mov	dpl,a
      00074C EA               [12] 1866 	mov	a,r2
      00074D 34s00            [12] 1867 	addc	a,#(_main_arr_input_65536_89 >> 8)
      00074F F5 83            [12] 1868 	mov	dph,a
      000751 EB               [12] 1869 	mov	a,r3
      000752 F0               [24] 1870 	movx	@dptr,a
      000753 EC               [12] 1871 	mov	a,r4
      000754 A3               [24] 1872 	inc	dptr
      000755 F0               [24] 1873 	movx	@dptr,a
                                   1874 ;	main.c:325: for (int j = 0; j<=7; j++)
      000756 0D               [12] 1875 	inc	r5
      000757 BD 00 01         [24] 1876 	cjne	r5,#0x00,00350$
      00075A 0F               [12] 1877 	inc	r7
      00075B                       1878 00350$:
      00075B 02r06rDD         [24] 1879 	ljmp	00153$
                                   1880 ;	main.c:339: for (int i=0;i<=7;i++)
      00075E                       1881 00196$:
      00075E 7D 00            [12] 1882 	mov	r5,#0x00
      000760 7F 00            [12] 1883 	mov	r7,#0x00
      000762                       1884 00156$:
      000762 C3               [12] 1885 	clr	c
      000763 74 07            [12] 1886 	mov	a,#0x07
      000765 9D               [12] 1887 	subb	a,r5
      000766 74 80            [12] 1888 	mov	a,#(0x00 ^ 0x80)
      000768 8F F0            [24] 1889 	mov	b,r7
      00076A 63 F0 80         [24] 1890 	xrl	b,#0x80
      00076D 95 F0            [12] 1891 	subb	a,b
      00076F 40 3D            [24] 1892 	jc	00145$
                                   1893 ;	main.c:341: printf_tiny("input values= %u\n\r",arr_input[i]);
      000771 ED               [12] 1894 	mov	a,r5
      000772 2D               [12] 1895 	add	a,r5
      000773 FB               [12] 1896 	mov	r3,a
      000774 EF               [12] 1897 	mov	a,r7
      000775 33               [12] 1898 	rlc	a
      000776 FC               [12] 1899 	mov	r4,a
      000777 EB               [12] 1900 	mov	a,r3
      000778 24r06            [12] 1901 	add	a,#_main_arr_input_65536_89
      00077A F5 82            [12] 1902 	mov	dpl,a
      00077C EC               [12] 1903 	mov	a,r4
      00077D 34s00            [12] 1904 	addc	a,#(_main_arr_input_65536_89 >> 8)
      00077F F5 83            [12] 1905 	mov	dph,a
      000781 E0               [24] 1906 	movx	a,@dptr
      000782 FB               [12] 1907 	mov	r3,a
      000783 A3               [24] 1908 	inc	dptr
      000784 E0               [24] 1909 	movx	a,@dptr
      000785 FC               [12] 1910 	mov	r4,a
      000786 C0 07            [24] 1911 	push	ar7
      000788 C0 06            [24] 1912 	push	ar6
      00078A C0 05            [24] 1913 	push	ar5
      00078C C0 03            [24] 1914 	push	ar3
      00078E C0 04            [24] 1915 	push	ar4
      000790 74r83            [12] 1916 	mov	a,#___str_28
      000792 C0 E0            [24] 1917 	push	acc
      000794 74s03            [12] 1918 	mov	a,#(___str_28 >> 8)
      000796 C0 E0            [24] 1919 	push	acc
      000798 12r00r00         [24] 1920 	lcall	_printf_tiny
      00079B E5 81            [12] 1921 	mov	a,sp
      00079D 24 FC            [12] 1922 	add	a,#0xfc
      00079F F5 81            [12] 1923 	mov	sp,a
      0007A1 D0 05            [24] 1924 	pop	ar5
      0007A3 D0 06            [24] 1925 	pop	ar6
      0007A5 D0 07            [24] 1926 	pop	ar7
                                   1927 ;	main.c:339: for (int i=0;i<=7;i++)
      0007A7 0D               [12] 1928 	inc	r5
      0007A8 BD 00 B7         [24] 1929 	cjne	r5,#0x00,00156$
      0007AB 0F               [12] 1930 	inc	r7
      0007AC 80 B4            [24] 1931 	sjmp	00156$
      0007AE                       1932 00145$:
                                   1933 ;	main.c:344: create_custom_char(ch_code, arr_input);
      0007AE 90r00r00         [24] 1934 	mov	dptr,#_create_custom_char_PARM_2
      0007B1 74r06            [12] 1935 	mov	a,#_main_arr_input_65536_89
      0007B3 F0               [24] 1936 	movx	@dptr,a
      0007B4 74s00            [12] 1937 	mov	a,#(_main_arr_input_65536_89 >> 8)
      0007B6 A3               [24] 1938 	inc	dptr
      0007B7 F0               [24] 1939 	movx	@dptr,a
      0007B8 E4               [12] 1940 	clr	a
      0007B9 A3               [24] 1941 	inc	dptr
      0007BA F0               [24] 1942 	movx	@dptr,a
      0007BB 8E 82            [24] 1943 	mov	dpl,r6
      0007BD 12r00r00         [24] 1944 	lcall	_create_custom_char
                                   1945 ;	main.c:345: break;
      0007C0 02r01r91         [24] 1946 	ljmp	00150$
                                   1947 ;	main.c:346: case 'I':
      0007C3                       1948 00146$:
                                   1949 ;	main.c:348: cgram_dump();
      0007C3 12r00r00         [24] 1950 	lcall	_cgram_dump
                                   1951 ;	main.c:349: break;
                                   1952 ;	main.c:352: }
                                   1953 ;	main.c:354: }
      0007C6 02r01r91         [24] 1954 	ljmp	00150$
                                   1955 	.area CSEG    (CODE)
                                   1956 	.area CONST   (CODE)
                                   1957 	.area CONST   (CODE)
      000000                       1958 ___str_0:
      000000 4D 41 4E 44 41 44 49  1959 	.ascii "MANDADI SAI CHARAN UCB ESD LAB 4 "
             20 53 41 49 20 43 48
             41 52 41 4E 20 55 43
             42 20 45 53 44 20 4C
             41 42 20 34 20
      000021 00                    1960 	.db 0x00
      000022 00                    1961 	.db 0x00
                                   1962 	.area CSEG    (CODE)
                                   1963 	.area CONST   (CODE)
      000023                       1964 ___str_1:
      000023 50 72 65 73 73 20 48  1965 	.ascii "Press H for the home menu"
             20 66 6F 72 20 74 68
             65 20 68 6F 6D 65 20
             6D 65 6E 75
      00003C 0A                    1966 	.db 0x0a
      00003D 0D                    1967 	.db 0x0d
      00003E 00                    1968 	.db 0x00
                                   1969 	.area CSEG    (CODE)
                                   1970 	.area CONST   (CODE)
      00003F                       1971 ___str_2:
      00003F 45 6E 74 65 72 20 61  1972 	.ascii "Enter a choice:    "
             20 63 68 6F 69 63 65
             3A 20 20 20 20
      000052 0A                    1973 	.db 0x0a
      000053 0D                    1974 	.db 0x0d
      000054 00                    1975 	.db 0x00
                                   1976 	.area CSEG    (CODE)
                                   1977 	.area CONST   (CODE)
      000055                       1978 ___str_3:
      000055 25 63                 1979 	.ascii "%c"
      000057 0A                    1980 	.db 0x0a
      000058 0D                    1981 	.db 0x0d
      000059 00                    1982 	.db 0x00
                                   1983 	.area CSEG    (CODE)
                                   1984 	.area CONST   (CODE)
      00005A                       1985 ___str_4:
      00005A 2A 2A 2A 2A 2A 2A 2A  1986 	.ascii "*************Home Menu***************"
             2A 2A 2A 2A 2A 2A 48
             6F 6D 65 20 4D 65 6E
             75 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A
      00007F 00                    1987 	.db 0x00
                                   1988 	.area CSEG    (CODE)
                                   1989 	.area CONST   (CODE)
      000080                       1990 ___str_5:
      000080 0A                    1991 	.db 0x0a
      000081 0D                    1992 	.db 0x0d
      000082 45 6E 74 65 72 20 4A  1993 	.ascii "Enter J to go to desired coordinate)"
             20 74 6F 20 67 6F 20
             74 6F 20 64 65 73 69
             72 65 64 20 63 6F 6F
             72 64 69 6E 61 74 65
             29
      0000A6 0A                    1994 	.db 0x0a
      0000A7 0D                    1995 	.db 0x0d
      0000A8 00                    1996 	.db 0x00
                                   1997 	.area CSEG    (CODE)
                                   1998 	.area CONST   (CODE)
      0000A9                       1999 ___str_6:
      0000A9 0A                    2000 	.db 0x0a
      0000AA 0D                    2001 	.db 0x0d
      0000AB 50 72 65 73 73 20 43  2002 	.ascii "Press C to print desired character on LCD"
             20 74 6F 20 70 72 69
             6E 74 20 64 65 73 69
             72 65 64 20 63 68 61
             72 61 63 74 65 72 20
             6F 6E 20 4C 43 44
      0000D4 0A                    2003 	.db 0x0a
      0000D5 0D                    2004 	.db 0x0d
      0000D6 00                    2005 	.db 0x00
                                   2006 	.area CSEG    (CODE)
                                   2007 	.area CONST   (CODE)
      0000D7                       2008 ___str_7:
      0000D7 0A                    2009 	.db 0x0a
      0000D8 0D                    2010 	.db 0x0d
      0000D9 50 72 65 73 73 20 53  2011 	.ascii "Press S to print desired string on LCD"
             20 74 6F 20 70 72 69
             6E 74 20 64 65 73 69
             72 65 64 20 73 74 72
             69 6E 67 20 6F 6E 20
             4C 43 44
      0000FF 0A                    2012 	.db 0x0a
      000100 0D                    2013 	.db 0x0d
      000101 00                    2014 	.db 0x00
                                   2015 	.area CSEG    (CODE)
                                   2016 	.area CONST   (CODE)
      000102                       2017 ___str_8:
      000102 0A                    2018 	.db 0x0a
      000103 0D                    2019 	.db 0x0d
      000104 50 72 65 73 73 20 42  2020 	.ascii "Press B to clear LCD"
             20 74 6F 20 63 6C 65
             61 72 20 4C 43 44
      000118 0A                    2021 	.db 0x0a
      000119 0D                    2022 	.db 0x0d
      00011A 00                    2023 	.db 0x00
                                   2024 	.area CSEG    (CODE)
                                   2025 	.area CONST   (CODE)
      00011B                       2026 ___str_9:
      00011B 0A                    2027 	.db 0x0a
      00011C 0D                    2028 	.db 0x0d
      00011D 50 72 65 73 73 20 45  2029 	.ascii "Press E to stop the elapsed time clock"
             20 74 6F 20 73 74 6F
             70 20 74 68 65 20 65
             6C 61 70 73 65 64 20
             74 69 6D 65 20 63 6C
             6F 63 6B
      000143 0A                    2030 	.db 0x0a
      000144 0D                    2031 	.db 0x0d
      000145 00                    2032 	.db 0x00
                                   2033 	.area CSEG    (CODE)
                                   2034 	.area CONST   (CODE)
      000146                       2035 ___str_10:
      000146 0A                    2036 	.db 0x0a
      000147 0D                    2037 	.db 0x0d
      000148 50 72 65 73 73 20 52  2038 	.ascii "Press R to restart the clock"
             20 74 6F 20 72 65 73
             74 61 72 74 20 74 68
             65 20 63 6C 6F 63 6B
      000164 0A                    2039 	.db 0x0a
      000165 0D                    2040 	.db 0x0d
      000166 00                    2041 	.db 0x00
                                   2042 	.area CSEG    (CODE)
                                   2043 	.area CONST   (CODE)
      000167                       2044 ___str_11:
      000167 0A                    2045 	.db 0x0a
      000168 0D                    2046 	.db 0x0d
      000169 50 72 65 73 73 20 5A  2047 	.ascii "Press Z to reset the clock back to '00:00.0'"
             20 74 6F 20 72 65 73
             65 74 20 74 68 65 20
             63 6C 6F 63 6B 20 62
             61 63 6B 20 74 6F 20
             27 30 30 3A 30 30 2E
             30 27
      000195 0A                    2048 	.db 0x0a
      000196 0D                    2049 	.db 0x0d
      000197 00                    2050 	.db 0x00
                                   2051 	.area CSEG    (CODE)
                                   2052 	.area CONST   (CODE)
      000198                       2053 ___str_12:
      000198 0A                    2054 	.db 0x0a
      000199 0D                    2055 	.db 0x0d
      00019A 50 72 65 73 73 20 47  2056 	.ascii "Press G to go to a particular address location'"
             20 74 6F 20 67 6F 20
             74 6F 20 61 20 70 61
             72 74 69 63 75 6C 61
             72 20 61 64 64 72 65
             73 73 20 6C 6F 63 61
             74 69 6F 6E 27
      0001C9 0A                    2057 	.db 0x0a
      0001CA 0D                    2058 	.db 0x0d
      0001CB 00                    2059 	.db 0x00
                                   2060 	.area CSEG    (CODE)
                                   2061 	.area CONST   (CODE)
      0001CC                       2062 ___str_13:
      0001CC 0A                    2063 	.db 0x0a
      0001CD 0D                    2064 	.db 0x0d
      0001CE 50 72 65 73 73 20 46  2065 	.ascii "Press F to Create a custom character'"
             20 74 6F 20 43 72 65
             61 74 65 20 61 20 63
             75 73 74 6F 6D 20 63
             68 61 72 61 63 74 65
             72 27
      0001F3 0A                    2066 	.db 0x0a
      0001F4 0D                    2067 	.db 0x0d
      0001F5 00                    2068 	.db 0x00
                                   2069 	.area CSEG    (CODE)
                                   2070 	.area CONST   (CODE)
      0001F6                       2071 ___str_14:
      0001F6 0A                    2072 	.db 0x0a
      0001F7 0D                    2073 	.db 0x0d
      0001F8 50 72 65 73 73 20 44  2074 	.ascii "Press D For Hex Dump of DDRAM"
             20 46 6F 72 20 48 65
             78 20 44 75 6D 70 20
             6F 66 20 44 44 52 41
             4D
      000215 0A                    2075 	.db 0x0a
      000216 0D                    2076 	.db 0x0d
      000217 00                    2077 	.db 0x00
                                   2078 	.area CSEG    (CODE)
                                   2079 	.area CONST   (CODE)
      000218                       2080 ___str_15:
      000218 0A                    2081 	.db 0x0a
      000219 0D                    2082 	.db 0x0d
      00021A 50 72 65 73 73 20 49  2083 	.ascii "Press I For Hex Dump of CGRAM"
             20 46 6F 72 20 48 65
             78 20 44 75 6D 70 20
             6F 66 20 43 47 52 41
             4D
      000237 0A                    2084 	.db 0x0a
      000238 0D                    2085 	.db 0x0d
      000239 00                    2086 	.db 0x00
                                   2087 	.area CSEG    (CODE)
                                   2088 	.area CONST   (CODE)
      00023A                       2089 ___str_16:
      00023A 0A                    2090 	.db 0x0a
      00023B 0D                    2091 	.db 0x0d
      00023C 2A 2A 2A 2A 2A 2A 2A  2092 	.ascii "**************************************************"
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A 2A 2A 2A 2A 2A 2A
             2A
      00026E 0A                    2093 	.db 0x0a
      00026F 0D                    2094 	.db 0x0d
      000270 00                    2095 	.db 0x00
                                   2096 	.area CSEG    (CODE)
                                   2097 	.area CONST   (CODE)
      000271                       2098 ___str_17:
      000271 45 6E 74 65 72 20 72  2099 	.ascii "Enter row: "
             6F 77 3A 20
      00027C 0A                    2100 	.db 0x0a
      00027D 0D                    2101 	.db 0x0d
      00027E 00                    2102 	.db 0x00
                                   2103 	.area CSEG    (CODE)
                                   2104 	.area CONST   (CODE)
      00027F                       2105 ___str_18:
      00027F 45 6E 74 65 72 20 63  2106 	.ascii "Enter column: "
             6F 6C 75 6D 6E 3A 20
      00028D 0A                    2107 	.db 0x0a
      00028E 0D                    2108 	.db 0x0d
      00028F 00                    2109 	.db 0x00
                                   2110 	.area CSEG    (CODE)
                                   2111 	.area CONST   (CODE)
      000290                       2112 ___str_19:
      000290 45 6E 74 65 72 20 61  2113 	.ascii "Enter a valid input with row 0-3 and column 0-F"
             20 76 61 6C 69 64 20
             69 6E 70 75 74 20 77
             69 74 68 20 72 6F 77
             20 30 2D 33 20 61 6E
             64 20 63 6F 6C 75 6D
             6E 20 30 2D 46
      0002BF 0A                    2114 	.db 0x0a
      0002C0 0D                    2115 	.db 0x0d
      0002C1 00                    2116 	.db 0x00
                                   2117 	.area CSEG    (CODE)
                                   2118 	.area CONST   (CODE)
      0002C2                       2119 ___str_20:
      0002C2 45 6E 74 65 72 20 63  2120 	.ascii "Enter character to print on LCD: "
             68 61 72 61 63 74 65
             72 20 74 6F 20 70 72
             69 6E 74 20 6F 6E 20
             4C 43 44 3A 20
      0002E3 0A                    2121 	.db 0x0a
      0002E4 0D                    2122 	.db 0x0d
      0002E5 00                    2123 	.db 0x00
                                   2124 	.area CSEG    (CODE)
                                   2125 	.area CONST   (CODE)
      0002E6                       2126 ___str_21:
      0002E6 45 6E 74 65 72 20 73  2127 	.ascii "Enter string to print on LCD: "
             74 72 69 6E 67 20 74
             6F 20 70 72 69 6E 74
             20 6F 6E 20 4C 43 44
             3A 20
      000304 0A                    2128 	.db 0x0a
      000305 0D                    2129 	.db 0x0d
      000306 00                    2130 	.db 0x00
                                   2131 	.area CSEG    (CODE)
                                   2132 	.area CONST   (CODE)
      000307                       2133 ___str_22:
      000307 25 63                 2134 	.ascii "%c"
      000309 00                    2135 	.db 0x00
                                   2136 	.area CSEG    (CODE)
                                   2137 	.area CONST   (CODE)
      00030A                       2138 ___str_23:
      00030A 45 6E 74 65 72 20 67  2139 	.ascii "Enter go to address: "
             6F 20 74 6F 20 61 64
             64 72 65 73 73 3A 20
      00031F 0A                    2140 	.db 0x0a
      000320 0D                    2141 	.db 0x0d
      000321 00                    2142 	.db 0x00
                                   2143 	.area CSEG    (CODE)
                                   2144 	.area CONST   (CODE)
      000322                       2145 ___str_24:
      000322 45 6E 74 65 72 20 61  2146 	.ascii "Enter a valid address 00-1f/ 40-58"
             20 76 61 6C 69 64 20
             61 64 64 72 65 73 73
             20 30 30 2D 31 66 2F
             20 34 30 2D 35 38
      000344 0A                    2147 	.db 0x0a
      000345 0D                    2148 	.db 0x0d
      000346 00                    2149 	.db 0x00
                                   2150 	.area CSEG    (CODE)
                                   2151 	.area CONST   (CODE)
      000347                       2152 ___str_25:
      000347 45 6E 74 65 72 20 63  2153 	.ascii "Enter custom code"
             75 73 74 6F 6D 20 63
             6F 64 65
      000358 0A                    2154 	.db 0x0a
      000359 0D                    2155 	.db 0x0d
      00035A 00                    2156 	.db 0x00
                                   2157 	.area CSEG    (CODE)
                                   2158 	.area CONST   (CODE)
      00035B                       2159 ___str_26:
      00035B 45 6E 74 65 72 20 52  2160 	.ascii "Enter Row values"
             6F 77 20 76 61 6C 75
             65 73
      00036B 0A                    2161 	.db 0x0a
      00036C 0D                    2162 	.db 0x0d
      00036D 00                    2163 	.db 0x00
                                   2164 	.area CSEG    (CODE)
                                   2165 	.area CONST   (CODE)
      00036E                       2166 ___str_27:
      00036E 49 6E 76 61 6C 69 64  2167 	.ascii "Invalid Row values"
             20 52 6F 77 20 76 61
             6C 75 65 73
      000380 0A                    2168 	.db 0x0a
      000381 0D                    2169 	.db 0x0d
      000382 00                    2170 	.db 0x00
                                   2171 	.area CSEG    (CODE)
                                   2172 	.area CONST   (CODE)
      000383                       2173 ___str_28:
      000383 69 6E 70 75 74 20 76  2174 	.ascii "input values= %u"
             61 6C 75 65 73 3D 20
             25 75
      000393 0A                    2175 	.db 0x0a
      000394 0D                    2176 	.db 0x0d
      000395 00                    2177 	.db 0x00
                                   2178 	.area CSEG    (CODE)
                                   2179 	.area XINIT   (CODE)
      000000                       2180 __xinit__counter:
      000000 00 00                 2181 	.byte #0x00, #0x00	;  0
      000002                       2182 __xinit__msec:
      000002 00                    2183 	.db #0x00	; 0
      000003                       2184 __xinit__secz:
      000003 00                    2185 	.db #0x00	; 0
      000004                       2186 __xinit__seco:
      000004 00                    2187 	.db #0x00	; 0
      000005                       2188 __xinit__minz:
      000005 00                    2189 	.db #0x00	; 0
      000006                       2190 __xinit__mino:
      000006 00                    2191 	.db #0x00	; 0
                                   2192 	.area CABS    (ABS,CODE)
